// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: project/project.proto

package project

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	//  List 获取项目列表
	List(ctx context.Context, in *ProjectListRequest, opts ...grpc.CallOption) (*ProjectListResponse, error)
	// Apply grpc 创建/更新项目
	Apply(ctx context.Context, in *ProjectApplyRequest, opts ...grpc.CallOption) (Project_ApplyClient, error)
	// ApplyDryRun 创建/更新项目 '--dry-run' mode
	ApplyDryRun(ctx context.Context, in *ProjectApplyRequest, opts ...grpc.CallOption) (*ProjectDryRunApplyResponse, error)
	// Show 项目详情
	Show(ctx context.Context, in *ProjectShowRequest, opts ...grpc.CallOption) (*ProjectShowResponse, error)
	// Delete 删除项目
	Delete(ctx context.Context, in *ProjectDeleteRequest, opts ...grpc.CallOption) (*ProjectDeleteResponse, error)
	// AllContainers 获取项目下的所有 pod
	AllContainers(ctx context.Context, in *ProjectAllContainersRequest, opts ...grpc.CallOption) (*ProjectAllContainersResponse, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) List(ctx context.Context, in *ProjectListRequest, opts ...grpc.CallOption) (*ProjectListResponse, error) {
	out := new(ProjectListResponse)
	err := c.cc.Invoke(ctx, "/Project/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Apply(ctx context.Context, in *ProjectApplyRequest, opts ...grpc.CallOption) (Project_ApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Project_ServiceDesc.Streams[0], "/Project/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Project_ApplyClient interface {
	Recv() (*ProjectApplyResponse, error)
	grpc.ClientStream
}

type projectApplyClient struct {
	grpc.ClientStream
}

func (x *projectApplyClient) Recv() (*ProjectApplyResponse, error) {
	m := new(ProjectApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectClient) ApplyDryRun(ctx context.Context, in *ProjectApplyRequest, opts ...grpc.CallOption) (*ProjectDryRunApplyResponse, error) {
	out := new(ProjectDryRunApplyResponse)
	err := c.cc.Invoke(ctx, "/Project/ApplyDryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Show(ctx context.Context, in *ProjectShowRequest, opts ...grpc.CallOption) (*ProjectShowResponse, error) {
	out := new(ProjectShowResponse)
	err := c.cc.Invoke(ctx, "/Project/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Delete(ctx context.Context, in *ProjectDeleteRequest, opts ...grpc.CallOption) (*ProjectDeleteResponse, error) {
	out := new(ProjectDeleteResponse)
	err := c.cc.Invoke(ctx, "/Project/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) AllContainers(ctx context.Context, in *ProjectAllContainersRequest, opts ...grpc.CallOption) (*ProjectAllContainersResponse, error) {
	out := new(ProjectAllContainersResponse)
	err := c.cc.Invoke(ctx, "/Project/AllContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServer is the server API for Project service.
// All implementations must embed UnimplementedProjectServer
// for forward compatibility
type ProjectServer interface {
	//  List 获取项目列表
	List(context.Context, *ProjectListRequest) (*ProjectListResponse, error)
	// Apply grpc 创建/更新项目
	Apply(*ProjectApplyRequest, Project_ApplyServer) error
	// ApplyDryRun 创建/更新项目 '--dry-run' mode
	ApplyDryRun(context.Context, *ProjectApplyRequest) (*ProjectDryRunApplyResponse, error)
	// Show 项目详情
	Show(context.Context, *ProjectShowRequest) (*ProjectShowResponse, error)
	// Delete 删除项目
	Delete(context.Context, *ProjectDeleteRequest) (*ProjectDeleteResponse, error)
	// AllContainers 获取项目下的所有 pod
	AllContainers(context.Context, *ProjectAllContainersRequest) (*ProjectAllContainersResponse, error)
	mustEmbedUnimplementedProjectServer()
}

// UnimplementedProjectServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (UnimplementedProjectServer) List(context.Context, *ProjectListRequest) (*ProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectServer) Apply(*ProjectApplyRequest, Project_ApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedProjectServer) ApplyDryRun(context.Context, *ProjectApplyRequest) (*ProjectDryRunApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDryRun not implemented")
}
func (UnimplementedProjectServer) Show(context.Context, *ProjectShowRequest) (*ProjectShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedProjectServer) Delete(context.Context, *ProjectDeleteRequest) (*ProjectDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectServer) AllContainers(context.Context, *ProjectAllContainersRequest) (*ProjectAllContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllContainers not implemented")
}
func (UnimplementedProjectServer) mustEmbedUnimplementedProjectServer() {}

// UnsafeProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServer will
// result in compilation errors.
type UnsafeProjectServer interface {
	mustEmbedUnimplementedProjectServer()
}

func RegisterProjectServer(s grpc.ServiceRegistrar, srv ProjectServer) {
	s.RegisterService(&Project_ServiceDesc, srv)
}

func _Project_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).List(ctx, req.(*ProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectApplyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServer).Apply(m, &projectApplyServer{stream})
}

type Project_ApplyServer interface {
	Send(*ProjectApplyResponse) error
	grpc.ServerStream
}

type projectApplyServer struct {
	grpc.ServerStream
}

func (x *projectApplyServer) Send(m *ProjectApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Project_ApplyDryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ApplyDryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/ApplyDryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ApplyDryRun(ctx, req.(*ProjectApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Show(ctx, req.(*ProjectShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Delete(ctx, req.(*ProjectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_AllContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectAllContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).AllContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/AllContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).AllContainers(ctx, req.(*ProjectAllContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Project_ServiceDesc is the grpc.ServiceDesc for Project service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Project_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Project_List_Handler,
		},
		{
			MethodName: "ApplyDryRun",
			Handler:    _Project_ApplyDryRun_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Project_Show_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Project_Delete_Handler,
		},
		{
			MethodName: "AllContainers",
			Handler:    _Project_AllContainers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _Project_Apply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "project/project.proto",
}
