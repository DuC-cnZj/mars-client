// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project/project.proto

package project

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDeleteRequestMultiError, or nil if none found.
func (m *ProjectDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectDeleteRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectDeleteRequestMultiError(errors)
	}
	return nil
}

// ProjectDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDeleteRequestMultiError) AllErrors() []error { return m }

// ProjectDeleteRequestValidationError is the validation error returned by
// ProjectDeleteRequest.Validate if the designated constraints aren't met.
type ProjectDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDeleteRequestValidationError) ErrorName() string {
	return "ProjectDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDeleteRequestValidationError{}

// Validate checks the field values on ProjectShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectShowRequestMultiError, or nil if none found.
func (m *ProjectShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectShowRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectShowRequestMultiError(errors)
	}
	return nil
}

// ProjectShowRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectShowRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectShowRequestMultiError) AllErrors() []error { return m }

// ProjectShowRequestValidationError is the validation error returned by
// ProjectShowRequest.Validate if the designated constraints aren't met.
type ProjectShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectShowRequestValidationError) ErrorName() string {
	return "ProjectShowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectShowRequestValidationError{}

// Validate checks the field values on ProjectShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectShowResponseMultiError, or nil if none found.
func (m *ProjectShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GitlabProjectId

	// no validation rules for GitlabBranch

	// no validation rules for GitlabCommit

	// no validation rules for Config

	// no validation rules for DockerImage

	// no validation rules for Atomic

	// no validation rules for GitlabCommitWebUrl

	// no validation rules for GitlabCommitTitle

	// no validation rules for GitlabCommitAuthor

	// no validation rules for GitlabCommitDate

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectShowResponseValidationError{
					field:  fmt.Sprintf("Urls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectShowResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectShowResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectShowResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for OverrideValues

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for HumanizeCreatedAt

	// no validation rules for HumanizeUpdatedAt

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectShowResponseValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectShowResponseValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ConfigType

	if len(errors) > 0 {
		return ProjectShowResponseMultiError(errors)
	}
	return nil
}

// ProjectShowResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectShowResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectShowResponseMultiError) AllErrors() []error { return m }

// ProjectShowResponseValidationError is the validation error returned by
// ProjectShowResponse.Validate if the designated constraints aren't met.
type ProjectShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectShowResponseValidationError) ErrorName() string {
	return "ProjectShowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectShowResponseValidationError{}

// Validate checks the field values on ProjectAllPodContainersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectAllPodContainersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectAllPodContainersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectAllPodContainersRequestMultiError, or nil if none found.
func (m *ProjectAllPodContainersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectAllPodContainersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectAllPodContainersRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectAllPodContainersRequestMultiError(errors)
	}
	return nil
}

// ProjectAllPodContainersRequestMultiError is an error wrapping multiple
// validation errors returned by ProjectAllPodContainersRequest.ValidateAll()
// if the designated constraints aren't met.
type ProjectAllPodContainersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectAllPodContainersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectAllPodContainersRequestMultiError) AllErrors() []error { return m }

// ProjectAllPodContainersRequestValidationError is the validation error
// returned by ProjectAllPodContainersRequest.Validate if the designated
// constraints aren't met.
type ProjectAllPodContainersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectAllPodContainersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectAllPodContainersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectAllPodContainersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectAllPodContainersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectAllPodContainersRequestValidationError) ErrorName() string {
	return "ProjectAllPodContainersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectAllPodContainersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectAllPodContainersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectAllPodContainersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectAllPodContainersRequestValidationError{}

// Validate checks the field values on ProjectPodLog with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectPodLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPodLog with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectPodLogMultiError, or
// nil if none found.
func (m *ProjectPodLog) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPodLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PodName

	// no validation rules for ContainerName

	// no validation rules for Log

	if len(errors) > 0 {
		return ProjectPodLogMultiError(errors)
	}
	return nil
}

// ProjectPodLogMultiError is an error wrapping multiple validation errors
// returned by ProjectPodLog.ValidateAll() if the designated constraints
// aren't met.
type ProjectPodLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPodLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPodLogMultiError) AllErrors() []error { return m }

// ProjectPodLogValidationError is the validation error returned by
// ProjectPodLog.Validate if the designated constraints aren't met.
type ProjectPodLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPodLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPodLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPodLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPodLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPodLogValidationError) ErrorName() string { return "ProjectPodLogValidationError" }

// Error satisfies the builtin error interface
func (e ProjectPodLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPodLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPodLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPodLogValidationError{}

// Validate checks the field values on ProjectAllPodContainersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectAllPodContainersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectAllPodContainersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectAllPodContainersResponseMultiError, or nil if none found.
func (m *ProjectAllPodContainersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectAllPodContainersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectAllPodContainersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectAllPodContainersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectAllPodContainersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectAllPodContainersResponseMultiError(errors)
	}
	return nil
}

// ProjectAllPodContainersResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectAllPodContainersResponse.ValidateAll()
// if the designated constraints aren't met.
type ProjectAllPodContainersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectAllPodContainersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectAllPodContainersResponseMultiError) AllErrors() []error { return m }

// ProjectAllPodContainersResponseValidationError is the validation error
// returned by ProjectAllPodContainersResponse.Validate if the designated
// constraints aren't met.
type ProjectAllPodContainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectAllPodContainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectAllPodContainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectAllPodContainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectAllPodContainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectAllPodContainersResponseValidationError) ErrorName() string {
	return "ProjectAllPodContainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectAllPodContainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectAllPodContainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectAllPodContainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectAllPodContainersResponseValidationError{}

// Validate checks the field values on ProjectPodContainerLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPodContainerLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPodContainerLogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectPodContainerLogRequestMultiError, or nil if none found.
func (m *ProjectPodContainerLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPodContainerLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectPodContainerLogRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ProjectPodContainerLogRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainer()) < 1 {
		err := ProjectPodContainerLogRequestValidationError{
			field:  "Container",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectPodContainerLogRequestMultiError(errors)
	}
	return nil
}

// ProjectPodContainerLogRequestMultiError is an error wrapping multiple
// validation errors returned by ProjectPodContainerLogRequest.ValidateAll()
// if the designated constraints aren't met.
type ProjectPodContainerLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPodContainerLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPodContainerLogRequestMultiError) AllErrors() []error { return m }

// ProjectPodContainerLogRequestValidationError is the validation error
// returned by ProjectPodContainerLogRequest.Validate if the designated
// constraints aren't met.
type ProjectPodContainerLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPodContainerLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPodContainerLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPodContainerLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPodContainerLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPodContainerLogRequestValidationError) ErrorName() string {
	return "ProjectPodContainerLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPodContainerLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPodContainerLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPodContainerLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPodContainerLogRequestValidationError{}

// Validate checks the field values on ProjectPodContainerLogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPodContainerLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPodContainerLogResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectPodContainerLogResponseMultiError, or nil if none found.
func (m *ProjectPodContainerLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPodContainerLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectPodContainerLogResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectPodContainerLogResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectPodContainerLogResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectPodContainerLogResponseMultiError(errors)
	}
	return nil
}

// ProjectPodContainerLogResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectPodContainerLogResponse.ValidateAll()
// if the designated constraints aren't met.
type ProjectPodContainerLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPodContainerLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPodContainerLogResponseMultiError) AllErrors() []error { return m }

// ProjectPodContainerLogResponseValidationError is the validation error
// returned by ProjectPodContainerLogResponse.Validate if the designated
// constraints aren't met.
type ProjectPodContainerLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPodContainerLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPodContainerLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPodContainerLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPodContainerLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPodContainerLogResponseValidationError) ErrorName() string {
	return "ProjectPodContainerLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPodContainerLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPodContainerLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPodContainerLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPodContainerLogResponseValidationError{}

// Validate checks the field values on ProjectIsPodRunningRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectIsPodRunningRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectIsPodRunningRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectIsPodRunningRequestMultiError, or nil if none found.
func (m *ProjectIsPodRunningRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectIsPodRunningRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNamespace()) < 1 {
		err := ProjectIsPodRunningRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ProjectIsPodRunningRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectIsPodRunningRequestMultiError(errors)
	}
	return nil
}

// ProjectIsPodRunningRequestMultiError is an error wrapping multiple
// validation errors returned by ProjectIsPodRunningRequest.ValidateAll() if
// the designated constraints aren't met.
type ProjectIsPodRunningRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectIsPodRunningRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectIsPodRunningRequestMultiError) AllErrors() []error { return m }

// ProjectIsPodRunningRequestValidationError is the validation error returned
// by ProjectIsPodRunningRequest.Validate if the designated constraints aren't met.
type ProjectIsPodRunningRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectIsPodRunningRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectIsPodRunningRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectIsPodRunningRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectIsPodRunningRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectIsPodRunningRequestValidationError) ErrorName() string {
	return "ProjectIsPodRunningRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectIsPodRunningRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectIsPodRunningRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectIsPodRunningRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectIsPodRunningRequestValidationError{}

// Validate checks the field values on ProjectIsPodRunningResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectIsPodRunningResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectIsPodRunningResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectIsPodRunningResponseMultiError, or nil if none found.
func (m *ProjectIsPodRunningResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectIsPodRunningResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Running

	// no validation rules for Reason

	if len(errors) > 0 {
		return ProjectIsPodRunningResponseMultiError(errors)
	}
	return nil
}

// ProjectIsPodRunningResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectIsPodRunningResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectIsPodRunningResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectIsPodRunningResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectIsPodRunningResponseMultiError) AllErrors() []error { return m }

// ProjectIsPodRunningResponseValidationError is the validation error returned
// by ProjectIsPodRunningResponse.Validate if the designated constraints
// aren't met.
type ProjectIsPodRunningResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectIsPodRunningResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectIsPodRunningResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectIsPodRunningResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectIsPodRunningResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectIsPodRunningResponseValidationError) ErrorName() string {
	return "ProjectIsPodRunningResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectIsPodRunningResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectIsPodRunningResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectIsPodRunningResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectIsPodRunningResponseValidationError{}

// Validate checks the field values on ProjectApplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectApplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectApplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectApplyResponseMultiError, or nil if none found.
func (m *ProjectApplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectApplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectApplyResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectApplyResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectApplyResponseMultiError(errors)
	}
	return nil
}

// ProjectApplyResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectApplyResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectApplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectApplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectApplyResponseMultiError) AllErrors() []error { return m }

// ProjectApplyResponseValidationError is the validation error returned by
// ProjectApplyResponse.Validate if the designated constraints aren't met.
type ProjectApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectApplyResponseValidationError) ErrorName() string {
	return "ProjectApplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectApplyResponseValidationError{}

// Validate checks the field values on ProjectApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectApplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectApplyRequestMultiError, or nil if none found.
func (m *ProjectApplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectApplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespaceId() <= 0 {
		err := ProjectApplyRequestValidationError{
			field:  "NamespaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetName()) < 1 {
		err := ProjectApplyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGitlabProjectId() <= 0 {
		err := ProjectApplyRequestValidationError{
			field:  "GitlabProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetGitlabBranch()) < 1 {
		err := ProjectApplyRequestValidationError{
			field:  "GitlabBranch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitlabCommit

	// no validation rules for Config

	// no validation rules for Atomic

	// no validation rules for WebsocketSync

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectApplyRequestValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectApplyRequestMultiError(errors)
	}
	return nil
}

// ProjectApplyRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectApplyRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectApplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectApplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectApplyRequestMultiError) AllErrors() []error { return m }

// ProjectApplyRequestValidationError is the validation error returned by
// ProjectApplyRequest.Validate if the designated constraints aren't met.
type ProjectApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectApplyRequestValidationError) ErrorName() string {
	return "ProjectApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectApplyRequestValidationError{}

// Validate checks the field values on ProjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDeleteResponseMultiError, or nil if none found.
func (m *ProjectDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectDeleteResponseMultiError(errors)
	}
	return nil
}

// ProjectDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDeleteResponseMultiError) AllErrors() []error { return m }

// ProjectDeleteResponseValidationError is the validation error returned by
// ProjectDeleteResponse.Validate if the designated constraints aren't met.
type ProjectDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDeleteResponseValidationError) ErrorName() string {
	return "ProjectDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDeleteResponseValidationError{}

// Validate checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListRequestMultiError, or nil if none found.
func (m *ProjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ProjectListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ProjectListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectListRequestMultiError(errors)
	}
	return nil
}

// ProjectListRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectListRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListRequestMultiError) AllErrors() []error { return m }

// ProjectListRequestValidationError is the validation error returned by
// ProjectListRequest.Validate if the designated constraints aren't met.
type ProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListRequestValidationError) ErrorName() string {
	return "ProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListRequestValidationError{}

// Validate checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListResponseMultiError, or nil if none found.
func (m *ProjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectListResponseMultiError(errors)
	}
	return nil
}

// ProjectListResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListResponseMultiError) AllErrors() []error { return m }

// ProjectListResponseValidationError is the validation error returned by
// ProjectListResponse.Validate if the designated constraints aren't met.
type ProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListResponseValidationError) ErrorName() string {
	return "ProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListResponseValidationError{}

// Validate checks the field values on ProjectIsPodExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectIsPodExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectIsPodExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectIsPodExistsRequestMultiError, or nil if none found.
func (m *ProjectIsPodExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectIsPodExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNamespace()) < 1 {
		err := ProjectIsPodExistsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ProjectIsPodExistsRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectIsPodExistsRequestMultiError(errors)
	}
	return nil
}

// ProjectIsPodExistsRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectIsPodExistsRequest.ValidateAll() if the
// designated constraints aren't met.
type ProjectIsPodExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectIsPodExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectIsPodExistsRequestMultiError) AllErrors() []error { return m }

// ProjectIsPodExistsRequestValidationError is the validation error returned by
// ProjectIsPodExistsRequest.Validate if the designated constraints aren't met.
type ProjectIsPodExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectIsPodExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectIsPodExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectIsPodExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectIsPodExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectIsPodExistsRequestValidationError) ErrorName() string {
	return "ProjectIsPodExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectIsPodExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectIsPodExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectIsPodExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectIsPodExistsRequestValidationError{}

// Validate checks the field values on ProjectIsPodExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectIsPodExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectIsPodExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectIsPodExistsResponseMultiError, or nil if none found.
func (m *ProjectIsPodExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectIsPodExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return ProjectIsPodExistsResponseMultiError(errors)
	}
	return nil
}

// ProjectIsPodExistsResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectIsPodExistsResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectIsPodExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectIsPodExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectIsPodExistsResponseMultiError) AllErrors() []error { return m }

// ProjectIsPodExistsResponseValidationError is the validation error returned
// by ProjectIsPodExistsResponse.Validate if the designated constraints aren't met.
type ProjectIsPodExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectIsPodExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectIsPodExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectIsPodExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectIsPodExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectIsPodExistsResponseValidationError) ErrorName() string {
	return "ProjectIsPodExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectIsPodExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectIsPodExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectIsPodExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectIsPodExistsResponseValidationError{}

// Validate checks the field values on ProjectShowResponse_Namespace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectShowResponse_Namespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectShowResponse_Namespace with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectShowResponse_NamespaceMultiError, or nil if none found.
func (m *ProjectShowResponse_Namespace) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectShowResponse_Namespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ProjectShowResponse_NamespaceMultiError(errors)
	}
	return nil
}

// ProjectShowResponse_NamespaceMultiError is an error wrapping multiple
// validation errors returned by ProjectShowResponse_Namespace.ValidateAll()
// if the designated constraints aren't met.
type ProjectShowResponse_NamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectShowResponse_NamespaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectShowResponse_NamespaceMultiError) AllErrors() []error { return m }

// ProjectShowResponse_NamespaceValidationError is the validation error
// returned by ProjectShowResponse_Namespace.Validate if the designated
// constraints aren't met.
type ProjectShowResponse_NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectShowResponse_NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectShowResponse_NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectShowResponse_NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectShowResponse_NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectShowResponse_NamespaceValidationError) ErrorName() string {
	return "ProjectShowResponse_NamespaceValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectShowResponse_NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectShowResponse_Namespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectShowResponse_NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectShowResponse_NamespaceValidationError{}
