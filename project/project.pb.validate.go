// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project/project.proto

package project

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDeleteRequestMultiError, or nil if none found.
func (m *ProjectDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectDeleteRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectDeleteRequestMultiError(errors)
	}

	return nil
}

// ProjectDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDeleteRequestMultiError) AllErrors() []error { return m }

// ProjectDeleteRequestValidationError is the validation error returned by
// ProjectDeleteRequest.Validate if the designated constraints aren't met.
type ProjectDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDeleteRequestValidationError) ErrorName() string {
	return "ProjectDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDeleteRequestValidationError{}

// Validate checks the field values on ProjectShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectShowRequestMultiError, or nil if none found.
func (m *ProjectShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectShowRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectShowRequestMultiError(errors)
	}

	return nil
}

// ProjectShowRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectShowRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectShowRequestMultiError) AllErrors() []error { return m }

// ProjectShowRequestValidationError is the validation error returned by
// ProjectShowRequest.Validate if the designated constraints aren't met.
type ProjectShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectShowRequestValidationError) ErrorName() string {
	return "ProjectShowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectShowRequestValidationError{}

// Validate checks the field values on ProjectShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectShowResponseMultiError, or nil if none found.
func (m *ProjectShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GitProjectId

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for Config

	// no validation rules for DockerImage

	// no validation rules for Atomic

	// no validation rules for GitCommitWebUrl

	// no validation rules for GitCommitTitle

	// no validation rules for GitCommitAuthor

	// no validation rules for GitCommitDate

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectShowResponseValidationError{
					field:  fmt.Sprintf("Urls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectShowResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectShowResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectShowResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for OverrideValues

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for HumanizeCreatedAt

	// no validation rules for HumanizeUpdatedAt

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectShowResponseValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectShowResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectShowResponseValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ConfigType

	if len(errors) > 0 {
		return ProjectShowResponseMultiError(errors)
	}

	return nil
}

// ProjectShowResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectShowResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectShowResponseMultiError) AllErrors() []error { return m }

// ProjectShowResponseValidationError is the validation error returned by
// ProjectShowResponse.Validate if the designated constraints aren't met.
type ProjectShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectShowResponseValidationError) ErrorName() string {
	return "ProjectShowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectShowResponseValidationError{}

// Validate checks the field values on ProjectAllContainersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectAllContainersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectAllContainersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectAllContainersRequestMultiError, or nil if none found.
func (m *ProjectAllContainersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectAllContainersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ProjectAllContainersRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectAllContainersRequestMultiError(errors)
	}

	return nil
}

// ProjectAllContainersRequestMultiError is an error wrapping multiple
// validation errors returned by ProjectAllContainersRequest.ValidateAll() if
// the designated constraints aren't met.
type ProjectAllContainersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectAllContainersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectAllContainersRequestMultiError) AllErrors() []error { return m }

// ProjectAllContainersRequestValidationError is the validation error returned
// by ProjectAllContainersRequest.Validate if the designated constraints
// aren't met.
type ProjectAllContainersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectAllContainersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectAllContainersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectAllContainersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectAllContainersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectAllContainersRequestValidationError) ErrorName() string {
	return "ProjectAllContainersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectAllContainersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectAllContainersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectAllContainersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectAllContainersRequestValidationError{}

// Validate checks the field values on ProjectPod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectPod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPod with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectPodMultiError, or
// nil if none found.
func (m *ProjectPod) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PodName

	// no validation rules for ContainerName

	if len(errors) > 0 {
		return ProjectPodMultiError(errors)
	}

	return nil
}

// ProjectPodMultiError is an error wrapping multiple validation errors
// returned by ProjectPod.ValidateAll() if the designated constraints aren't met.
type ProjectPodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPodMultiError) AllErrors() []error { return m }

// ProjectPodValidationError is the validation error returned by
// ProjectPod.Validate if the designated constraints aren't met.
type ProjectPodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPodValidationError) ErrorName() string { return "ProjectPodValidationError" }

// Error satisfies the builtin error interface
func (e ProjectPodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPodValidationError{}

// Validate checks the field values on ProjectAllContainersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectAllContainersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectAllContainersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectAllContainersResponseMultiError, or nil if none found.
func (m *ProjectAllContainersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectAllContainersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectAllContainersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectAllContainersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectAllContainersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectAllContainersResponseMultiError(errors)
	}

	return nil
}

// ProjectAllContainersResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectAllContainersResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectAllContainersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectAllContainersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectAllContainersResponseMultiError) AllErrors() []error { return m }

// ProjectAllContainersResponseValidationError is the validation error returned
// by ProjectAllContainersResponse.Validate if the designated constraints
// aren't met.
type ProjectAllContainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectAllContainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectAllContainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectAllContainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectAllContainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectAllContainersResponseValidationError) ErrorName() string {
	return "ProjectAllContainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectAllContainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectAllContainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectAllContainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectAllContainersResponseValidationError{}

// Validate checks the field values on ProjectApplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectApplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectApplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectApplyResponseMultiError, or nil if none found.
func (m *ProjectApplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectApplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectApplyResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectApplyResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectApplyResponseMultiError(errors)
	}

	return nil
}

// ProjectApplyResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectApplyResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectApplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectApplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectApplyResponseMultiError) AllErrors() []error { return m }

// ProjectApplyResponseValidationError is the validation error returned by
// ProjectApplyResponse.Validate if the designated constraints aren't met.
type ProjectApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectApplyResponseValidationError) ErrorName() string {
	return "ProjectApplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectApplyResponseValidationError{}

// Validate checks the field values on ProjectDryRunApplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDryRunApplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDryRunApplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDryRunApplyResponseMultiError, or nil if none found.
func (m *ProjectDryRunApplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDryRunApplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectDryRunApplyResponseMultiError(errors)
	}

	return nil
}

// ProjectDryRunApplyResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectDryRunApplyResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectDryRunApplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDryRunApplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDryRunApplyResponseMultiError) AllErrors() []error { return m }

// ProjectDryRunApplyResponseValidationError is the validation error returned
// by ProjectDryRunApplyResponse.Validate if the designated constraints aren't met.
type ProjectDryRunApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDryRunApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDryRunApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDryRunApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDryRunApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDryRunApplyResponseValidationError) ErrorName() string {
	return "ProjectDryRunApplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDryRunApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDryRunApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDryRunApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDryRunApplyResponseValidationError{}

// Validate checks the field values on ProjectApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectApplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectApplyRequestMultiError, or nil if none found.
func (m *ProjectApplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectApplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespaceId() <= 0 {
		err := ProjectApplyRequestValidationError{
			field:  "NamespaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if m.GetGitProjectId() <= 0 {
		err := ProjectApplyRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetGitBranch()) < 1 {
		err := ProjectApplyRequestValidationError{
			field:  "GitBranch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitCommit

	// no validation rules for Config

	// no validation rules for Atomic

	// no validation rules for WebsocketSync

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectApplyRequestValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetInstallTimeoutSeconds() < 0 {
		err := ProjectApplyRequestValidationError{
			field:  "InstallTimeoutSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectApplyRequestMultiError(errors)
	}

	return nil
}

// ProjectApplyRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectApplyRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectApplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectApplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectApplyRequestMultiError) AllErrors() []error { return m }

// ProjectApplyRequestValidationError is the validation error returned by
// ProjectApplyRequest.Validate if the designated constraints aren't met.
type ProjectApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectApplyRequestValidationError) ErrorName() string {
	return "ProjectApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectApplyRequestValidationError{}

// Validate checks the field values on ProjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDeleteResponseMultiError, or nil if none found.
func (m *ProjectDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectDeleteResponseMultiError(errors)
	}

	return nil
}

// ProjectDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDeleteResponseMultiError) AllErrors() []error { return m }

// ProjectDeleteResponseValidationError is the validation error returned by
// ProjectDeleteResponse.Validate if the designated constraints aren't met.
type ProjectDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDeleteResponseValidationError) ErrorName() string {
	return "ProjectDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDeleteResponseValidationError{}

// Validate checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListRequestMultiError, or nil if none found.
func (m *ProjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ProjectListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ProjectListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectListRequestMultiError(errors)
	}

	return nil
}

// ProjectListRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectListRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListRequestMultiError) AllErrors() []error { return m }

// ProjectListRequestValidationError is the validation error returned by
// ProjectListRequest.Validate if the designated constraints aren't met.
type ProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListRequestValidationError) ErrorName() string {
	return "ProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListRequestValidationError{}

// Validate checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListResponseMultiError, or nil if none found.
func (m *ProjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Count

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectListResponseMultiError(errors)
	}

	return nil
}

// ProjectListResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListResponseMultiError) AllErrors() []error { return m }

// ProjectListResponseValidationError is the validation error returned by
// ProjectListResponse.Validate if the designated constraints aren't met.
type ProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListResponseValidationError) ErrorName() string {
	return "ProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListResponseValidationError{}

// Validate checks the field values on ProjectShowResponse_Namespace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectShowResponse_Namespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectShowResponse_Namespace with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectShowResponse_NamespaceMultiError, or nil if none found.
func (m *ProjectShowResponse_Namespace) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectShowResponse_Namespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ProjectShowResponse_NamespaceMultiError(errors)
	}

	return nil
}

// ProjectShowResponse_NamespaceMultiError is an error wrapping multiple
// validation errors returned by ProjectShowResponse_Namespace.ValidateAll()
// if the designated constraints aren't met.
type ProjectShowResponse_NamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectShowResponse_NamespaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectShowResponse_NamespaceMultiError) AllErrors() []error { return m }

// ProjectShowResponse_NamespaceValidationError is the validation error
// returned by ProjectShowResponse_Namespace.Validate if the designated
// constraints aren't met.
type ProjectShowResponse_NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectShowResponse_NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectShowResponse_NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectShowResponse_NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectShowResponse_NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectShowResponse_NamespaceValidationError) ErrorName() string {
	return "ProjectShowResponse_NamespaceValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectShowResponse_NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectShowResponse_Namespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectShowResponse_NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectShowResponse_NamespaceValidationError{}
