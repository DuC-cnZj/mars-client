// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: endpoint/endpoint.proto

package endpoint

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceEndpoint with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceEndpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceEndpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceEndpointMultiError, or nil if none found.
func (m *ServiceEndpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceEndpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for PortName

	if len(errors) > 0 {
		return ServiceEndpointMultiError(errors)
	}

	return nil
}

// ServiceEndpointMultiError is an error wrapping multiple validation errors
// returned by ServiceEndpoint.ValidateAll() if the designated constraints
// aren't met.
type ServiceEndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceEndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceEndpointMultiError) AllErrors() []error { return m }

// ServiceEndpointValidationError is the validation error returned by
// ServiceEndpoint.Validate if the designated constraints aren't met.
type ServiceEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceEndpointValidationError) ErrorName() string { return "ServiceEndpointValidationError" }

// Error satisfies the builtin error interface
func (e ServiceEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceEndpointValidationError{}

// Validate checks the field values on EndpointInNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndpointInNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointInNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndpointInNamespaceRequestMultiError, or nil if none found.
func (m *EndpointInNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointInNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespaceId() <= 0 {
		err := EndpointInNamespaceRequestValidationError{
			field:  "NamespaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EndpointInNamespaceRequestMultiError(errors)
	}

	return nil
}

// EndpointInNamespaceRequestMultiError is an error wrapping multiple
// validation errors returned by EndpointInNamespaceRequest.ValidateAll() if
// the designated constraints aren't met.
type EndpointInNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointInNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointInNamespaceRequestMultiError) AllErrors() []error { return m }

// EndpointInNamespaceRequestValidationError is the validation error returned
// by EndpointInNamespaceRequest.Validate if the designated constraints aren't met.
type EndpointInNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointInNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointInNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointInNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointInNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointInNamespaceRequestValidationError) ErrorName() string {
	return "EndpointInNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EndpointInNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointInNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointInNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointInNamespaceRequestValidationError{}

// Validate checks the field values on EndpointInNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndpointInNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointInNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndpointInNamespaceResponseMultiError, or nil if none found.
func (m *EndpointInNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointInNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EndpointInNamespaceResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EndpointInNamespaceResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndpointInNamespaceResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EndpointInNamespaceResponseMultiError(errors)
	}

	return nil
}

// EndpointInNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by EndpointInNamespaceResponse.ValidateAll() if
// the designated constraints aren't met.
type EndpointInNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointInNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointInNamespaceResponseMultiError) AllErrors() []error { return m }

// EndpointInNamespaceResponseValidationError is the validation error returned
// by EndpointInNamespaceResponse.Validate if the designated constraints
// aren't met.
type EndpointInNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointInNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointInNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointInNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointInNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointInNamespaceResponseValidationError) ErrorName() string {
	return "EndpointInNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EndpointInNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointInNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointInNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointInNamespaceResponseValidationError{}

// Validate checks the field values on EndpointInProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndpointInProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointInProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndpointInProjectRequestMultiError, or nil if none found.
func (m *EndpointInProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointInProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := EndpointInProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EndpointInProjectRequestMultiError(errors)
	}

	return nil
}

// EndpointInProjectRequestMultiError is an error wrapping multiple validation
// errors returned by EndpointInProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type EndpointInProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointInProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointInProjectRequestMultiError) AllErrors() []error { return m }

// EndpointInProjectRequestValidationError is the validation error returned by
// EndpointInProjectRequest.Validate if the designated constraints aren't met.
type EndpointInProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointInProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointInProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointInProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointInProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointInProjectRequestValidationError) ErrorName() string {
	return "EndpointInProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EndpointInProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointInProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointInProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointInProjectRequestValidationError{}

// Validate checks the field values on EndpointInProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndpointInProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointInProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndpointInProjectResponseMultiError, or nil if none found.
func (m *EndpointInProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointInProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EndpointInProjectResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EndpointInProjectResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EndpointInProjectResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EndpointInProjectResponseMultiError(errors)
	}

	return nil
}

// EndpointInProjectResponseMultiError is an error wrapping multiple validation
// errors returned by EndpointInProjectResponse.ValidateAll() if the
// designated constraints aren't met.
type EndpointInProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointInProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointInProjectResponseMultiError) AllErrors() []error { return m }

// EndpointInProjectResponseValidationError is the validation error returned by
// EndpointInProjectResponse.Validate if the designated constraints aren't met.
type EndpointInProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointInProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointInProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointInProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointInProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointInProjectResponseValidationError) ErrorName() string {
	return "EndpointInProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EndpointInProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointInProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointInProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointInProjectResponseValidationError{}
