// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mars/mars.proto

package mars

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MarsConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MarsConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MarsConfigMultiError, or
// nil if none found.
func (m *MarsConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigFile

	// no validation rules for ConfigFileValues

	// no validation rules for ConfigField

	// no validation rules for IsSimpleEnv

	// no validation rules for ConfigFileType

	// no validation rules for LocalChartPath

	// no validation rules for ValuesYaml

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarsConfigValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarsConfigValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarsConfigValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MarsConfigMultiError(errors)
	}
	return nil
}

// MarsConfigMultiError is an error wrapping multiple validation errors
// returned by MarsConfig.ValidateAll() if the designated constraints aren't met.
type MarsConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsConfigMultiError) AllErrors() []error { return m }

// MarsConfigValidationError is the validation error returned by
// MarsConfig.Validate if the designated constraints aren't met.
type MarsConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsConfigValidationError) ErrorName() string { return "MarsConfigValidationError" }

// Error satisfies the builtin error interface
func (e MarsConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsConfigValidationError{}

// Validate checks the field values on Element with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Element) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Element with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ElementMultiError, or nil if none found.
func (m *Element) ValidateAll() error {
	return m.validate(true)
}

func (m *Element) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPath()) < 1 {
		err := ElementValidationError{
			field:  "Path",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ElementType_name[int32(m.GetType())]; !ok {
		err := ElementValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Default

	// no validation rules for Description

	if len(errors) > 0 {
		return ElementMultiError(errors)
	}
	return nil
}

// ElementMultiError is an error wrapping multiple validation errors returned
// by Element.ValidateAll() if the designated constraints aren't met.
type ElementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ElementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ElementMultiError) AllErrors() []error { return m }

// ElementValidationError is the validation error returned by Element.Validate
// if the designated constraints aren't met.
type ElementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ElementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ElementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ElementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ElementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ElementValidationError) ErrorName() string { return "ElementValidationError" }

// Error satisfies the builtin error interface
func (e ElementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sElement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ElementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ElementValidationError{}

// Validate checks the field values on MarsShowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarsShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsShowRequestMultiError, or nil if none found.
func (m *MarsShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := MarsShowRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return MarsShowRequestMultiError(errors)
	}
	return nil
}

// MarsShowRequestMultiError is an error wrapping multiple validation errors
// returned by MarsShowRequest.ValidateAll() if the designated constraints
// aren't met.
type MarsShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsShowRequestMultiError) AllErrors() []error { return m }

// MarsShowRequestValidationError is the validation error returned by
// MarsShowRequest.Validate if the designated constraints aren't met.
type MarsShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsShowRequestValidationError) ErrorName() string { return "MarsShowRequestValidationError" }

// Error satisfies the builtin error interface
func (e MarsShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsShowRequestValidationError{}

// Validate checks the field values on MarsShowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarsShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsShowResponseMultiError, or nil if none found.
func (m *MarsShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Branch

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarsShowResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarsShowResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarsShowResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarsShowResponseMultiError(errors)
	}
	return nil
}

// MarsShowResponseMultiError is an error wrapping multiple validation errors
// returned by MarsShowResponse.ValidateAll() if the designated constraints
// aren't met.
type MarsShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsShowResponseMultiError) AllErrors() []error { return m }

// MarsShowResponseValidationError is the validation error returned by
// MarsShowResponse.Validate if the designated constraints aren't met.
type MarsShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsShowResponseValidationError) ErrorName() string { return "MarsShowResponseValidationError" }

// Error satisfies the builtin error interface
func (e MarsShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsShowResponseValidationError{}

// Validate checks the field values on MarsGlobalConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsGlobalConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsGlobalConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsGlobalConfigRequestMultiError, or nil if none found.
func (m *MarsGlobalConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsGlobalConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := MarsGlobalConfigRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MarsGlobalConfigRequestMultiError(errors)
	}
	return nil
}

// MarsGlobalConfigRequestMultiError is an error wrapping multiple validation
// errors returned by MarsGlobalConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type MarsGlobalConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsGlobalConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsGlobalConfigRequestMultiError) AllErrors() []error { return m }

// MarsGlobalConfigRequestValidationError is the validation error returned by
// MarsGlobalConfigRequest.Validate if the designated constraints aren't met.
type MarsGlobalConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsGlobalConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsGlobalConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsGlobalConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsGlobalConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsGlobalConfigRequestValidationError) ErrorName() string {
	return "MarsGlobalConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarsGlobalConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsGlobalConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsGlobalConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsGlobalConfigRequestValidationError{}

// Validate checks the field values on MarsGlobalConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsGlobalConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsGlobalConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsGlobalConfigResponseMultiError, or nil if none found.
func (m *MarsGlobalConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsGlobalConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarsGlobalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarsGlobalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarsGlobalConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarsGlobalConfigResponseMultiError(errors)
	}
	return nil
}

// MarsGlobalConfigResponseMultiError is an error wrapping multiple validation
// errors returned by MarsGlobalConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type MarsGlobalConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsGlobalConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsGlobalConfigResponseMultiError) AllErrors() []error { return m }

// MarsGlobalConfigResponseValidationError is the validation error returned by
// MarsGlobalConfigResponse.Validate if the designated constraints aren't met.
type MarsGlobalConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsGlobalConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsGlobalConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsGlobalConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsGlobalConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsGlobalConfigResponseValidationError) ErrorName() string {
	return "MarsGlobalConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarsGlobalConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsGlobalConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsGlobalConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsGlobalConfigResponseValidationError{}

// Validate checks the field values on MarsUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarsUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsUpdateRequestMultiError, or nil if none found.
func (m *MarsUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := MarsUpdateRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarsUpdateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarsUpdateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarsUpdateRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarsUpdateRequestMultiError(errors)
	}
	return nil
}

// MarsUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by MarsUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type MarsUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsUpdateRequestMultiError) AllErrors() []error { return m }

// MarsUpdateRequestValidationError is the validation error returned by
// MarsUpdateRequest.Validate if the designated constraints aren't met.
type MarsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsUpdateRequestValidationError) ErrorName() string {
	return "MarsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsUpdateRequestValidationError{}

// Validate checks the field values on MarsUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsUpdateResponseMultiError, or nil if none found.
func (m *MarsUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarsUpdateResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarsUpdateResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarsUpdateResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarsUpdateResponseMultiError(errors)
	}
	return nil
}

// MarsUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by MarsUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type MarsUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsUpdateResponseMultiError) AllErrors() []error { return m }

// MarsUpdateResponseValidationError is the validation error returned by
// MarsUpdateResponse.Validate if the designated constraints aren't met.
type MarsUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsUpdateResponseValidationError) ErrorName() string {
	return "MarsUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarsUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsUpdateResponseValidationError{}

// Validate checks the field values on MarsToggleEnabledRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsToggleEnabledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsToggleEnabledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsToggleEnabledRequestMultiError, or nil if none found.
func (m *MarsToggleEnabledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsToggleEnabledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := MarsToggleEnabledRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return MarsToggleEnabledRequestMultiError(errors)
	}
	return nil
}

// MarsToggleEnabledRequestMultiError is an error wrapping multiple validation
// errors returned by MarsToggleEnabledRequest.ValidateAll() if the designated
// constraints aren't met.
type MarsToggleEnabledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsToggleEnabledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsToggleEnabledRequestMultiError) AllErrors() []error { return m }

// MarsToggleEnabledRequestValidationError is the validation error returned by
// MarsToggleEnabledRequest.Validate if the designated constraints aren't met.
type MarsToggleEnabledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsToggleEnabledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsToggleEnabledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsToggleEnabledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsToggleEnabledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsToggleEnabledRequestValidationError) ErrorName() string {
	return "MarsToggleEnabledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarsToggleEnabledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsToggleEnabledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsToggleEnabledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsToggleEnabledRequestValidationError{}

// Validate checks the field values on MarsDefaultChartValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsDefaultChartValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsDefaultChartValuesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MarsDefaultChartValuesRequestMultiError, or nil if none found.
func (m *MarsDefaultChartValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsDefaultChartValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := MarsDefaultChartValuesRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return MarsDefaultChartValuesRequestMultiError(errors)
	}
	return nil
}

// MarsDefaultChartValuesRequestMultiError is an error wrapping multiple
// validation errors returned by MarsDefaultChartValuesRequest.ValidateAll()
// if the designated constraints aren't met.
type MarsDefaultChartValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsDefaultChartValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsDefaultChartValuesRequestMultiError) AllErrors() []error { return m }

// MarsDefaultChartValuesRequestValidationError is the validation error
// returned by MarsDefaultChartValuesRequest.Validate if the designated
// constraints aren't met.
type MarsDefaultChartValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsDefaultChartValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsDefaultChartValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsDefaultChartValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsDefaultChartValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsDefaultChartValuesRequestValidationError) ErrorName() string {
	return "MarsDefaultChartValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarsDefaultChartValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsDefaultChartValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsDefaultChartValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsDefaultChartValuesRequestValidationError{}

// Validate checks the field values on MarsDefaultChartValuesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsDefaultChartValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsDefaultChartValuesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MarsDefaultChartValuesResponseMultiError, or nil if none found.
func (m *MarsDefaultChartValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsDefaultChartValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return MarsDefaultChartValuesResponseMultiError(errors)
	}
	return nil
}

// MarsDefaultChartValuesResponseMultiError is an error wrapping multiple
// validation errors returned by MarsDefaultChartValuesResponse.ValidateAll()
// if the designated constraints aren't met.
type MarsDefaultChartValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsDefaultChartValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsDefaultChartValuesResponseMultiError) AllErrors() []error { return m }

// MarsDefaultChartValuesResponseValidationError is the validation error
// returned by MarsDefaultChartValuesResponse.Validate if the designated
// constraints aren't met.
type MarsDefaultChartValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsDefaultChartValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsDefaultChartValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsDefaultChartValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsDefaultChartValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsDefaultChartValuesResponseValidationError) ErrorName() string {
	return "MarsDefaultChartValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarsDefaultChartValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsDefaultChartValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsDefaultChartValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsDefaultChartValuesResponseValidationError{}

// Validate checks the field values on MarsToggleEnabledResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarsToggleEnabledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarsToggleEnabledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarsToggleEnabledResponseMultiError, or nil if none found.
func (m *MarsToggleEnabledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarsToggleEnabledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarsToggleEnabledResponseMultiError(errors)
	}
	return nil
}

// MarsToggleEnabledResponseMultiError is an error wrapping multiple validation
// errors returned by MarsToggleEnabledResponse.ValidateAll() if the
// designated constraints aren't met.
type MarsToggleEnabledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarsToggleEnabledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarsToggleEnabledResponseMultiError) AllErrors() []error { return m }

// MarsToggleEnabledResponseValidationError is the validation error returned by
// MarsToggleEnabledResponse.Validate if the designated constraints aren't met.
type MarsToggleEnabledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarsToggleEnabledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarsToggleEnabledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarsToggleEnabledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarsToggleEnabledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarsToggleEnabledResponseValidationError) ErrorName() string {
	return "MarsToggleEnabledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarsToggleEnabledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarsToggleEnabledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarsToggleEnabledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarsToggleEnabledResponseValidationError{}
