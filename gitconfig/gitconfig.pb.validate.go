// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gitconfig/gitconfig.proto

package gitconfig

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileRequestMultiError, or
// nil if none found.
func (m *FileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := FileRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := FileRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FileRequestMultiError(errors)
	}

	return nil
}

// FileRequestMultiError is an error wrapping multiple validation errors
// returned by FileRequest.ValidateAll() if the designated constraints aren't met.
type FileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileRequestMultiError) AllErrors() []error { return m }

// FileRequestValidationError is the validation error returned by
// FileRequest.Validate if the designated constraints aren't met.
type FileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileRequestValidationError) ErrorName() string { return "FileRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileRequestValidationError{}

// Validate checks the field values on FileResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileResponseMultiError, or
// nil if none found.
func (m *FileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Type

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileResponseValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FileResponseMultiError(errors)
	}

	return nil
}

// FileResponseMultiError is an error wrapping multiple validation errors
// returned by FileResponse.ValidateAll() if the designated constraints aren't met.
type FileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileResponseMultiError) AllErrors() []error { return m }

// FileResponseValidationError is the validation error returned by
// FileResponse.Validate if the designated constraints aren't met.
type FileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileResponseValidationError) ErrorName() string { return "FileResponseValidationError" }

// Error satisfies the builtin error interface
func (e FileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileResponseValidationError{}

// Validate checks the field values on ShowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowRequestMultiError, or
// nil if none found.
func (m *ShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := ShowRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return ShowRequestMultiError(errors)
	}

	return nil
}

// ShowRequestMultiError is an error wrapping multiple validation errors
// returned by ShowRequest.ValidateAll() if the designated constraints aren't met.
type ShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowRequestMultiError) AllErrors() []error { return m }

// ShowRequestValidationError is the validation error returned by
// ShowRequest.Validate if the designated constraints aren't met.
type ShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowRequestValidationError) ErrorName() string { return "ShowRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowRequestValidationError{}

// Validate checks the field values on ShowResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowResponseMultiError, or
// nil if none found.
func (m *ShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Branch

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowResponseMultiError(errors)
	}

	return nil
}

// ShowResponseMultiError is an error wrapping multiple validation errors
// returned by ShowResponse.ValidateAll() if the designated constraints aren't met.
type ShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowResponseMultiError) AllErrors() []error { return m }

// ShowResponseValidationError is the validation error returned by
// ShowResponse.Validate if the designated constraints aren't met.
type ShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowResponseValidationError) ErrorName() string { return "ShowResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowResponseValidationError{}

// Validate checks the field values on GlobalConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalConfigRequestMultiError, or nil if none found.
func (m *GlobalConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := GlobalConfigRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GlobalConfigRequestMultiError(errors)
	}

	return nil
}

// GlobalConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GlobalConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GlobalConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalConfigRequestMultiError) AllErrors() []error { return m }

// GlobalConfigRequestValidationError is the validation error returned by
// GlobalConfigRequest.Validate if the designated constraints aren't met.
type GlobalConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalConfigRequestValidationError) ErrorName() string {
	return "GlobalConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalConfigRequestValidationError{}

// Validate checks the field values on GlobalConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalConfigResponseMultiError, or nil if none found.
func (m *GlobalConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalConfigResponseMultiError(errors)
	}

	return nil
}

// GlobalConfigResponseMultiError is an error wrapping multiple validation
// errors returned by GlobalConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GlobalConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalConfigResponseMultiError) AllErrors() []error { return m }

// GlobalConfigResponseValidationError is the validation error returned by
// GlobalConfigResponse.Validate if the designated constraints aren't met.
type GlobalConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalConfigResponseValidationError) ErrorName() string {
	return "GlobalConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalConfigResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := UpdateRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on ToggleGlobalStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleGlobalStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleGlobalStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleGlobalStatusRequestMultiError, or nil if none found.
func (m *ToggleGlobalStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleGlobalStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := ToggleGlobalStatusRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ToggleGlobalStatusRequestMultiError(errors)
	}

	return nil
}

// ToggleGlobalStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleGlobalStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type ToggleGlobalStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleGlobalStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleGlobalStatusRequestMultiError) AllErrors() []error { return m }

// ToggleGlobalStatusRequestValidationError is the validation error returned by
// ToggleGlobalStatusRequest.Validate if the designated constraints aren't met.
type ToggleGlobalStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleGlobalStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleGlobalStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleGlobalStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleGlobalStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleGlobalStatusRequestValidationError) ErrorName() string {
	return "ToggleGlobalStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleGlobalStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleGlobalStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleGlobalStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleGlobalStatusRequestValidationError{}

// Validate checks the field values on DefaultChartValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DefaultChartValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DefaultChartValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DefaultChartValuesRequestMultiError, or nil if none found.
func (m *DefaultChartValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultChartValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := DefaultChartValuesRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return DefaultChartValuesRequestMultiError(errors)
	}

	return nil
}

// DefaultChartValuesRequestMultiError is an error wrapping multiple validation
// errors returned by DefaultChartValuesRequest.ValidateAll() if the
// designated constraints aren't met.
type DefaultChartValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultChartValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultChartValuesRequestMultiError) AllErrors() []error { return m }

// DefaultChartValuesRequestValidationError is the validation error returned by
// DefaultChartValuesRequest.Validate if the designated constraints aren't met.
type DefaultChartValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultChartValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultChartValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultChartValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultChartValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultChartValuesRequestValidationError) ErrorName() string {
	return "DefaultChartValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultChartValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultChartValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultChartValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultChartValuesRequestValidationError{}

// Validate checks the field values on DefaultChartValuesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DefaultChartValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DefaultChartValuesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DefaultChartValuesResponseMultiError, or nil if none found.
func (m *DefaultChartValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultChartValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return DefaultChartValuesResponseMultiError(errors)
	}

	return nil
}

// DefaultChartValuesResponseMultiError is an error wrapping multiple
// validation errors returned by DefaultChartValuesResponse.ValidateAll() if
// the designated constraints aren't met.
type DefaultChartValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultChartValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultChartValuesResponseMultiError) AllErrors() []error { return m }

// DefaultChartValuesResponseValidationError is the validation error returned
// by DefaultChartValuesResponse.Validate if the designated constraints aren't met.
type DefaultChartValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultChartValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultChartValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultChartValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultChartValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultChartValuesResponseValidationError) ErrorName() string {
	return "DefaultChartValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultChartValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultChartValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultChartValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultChartValuesResponseValidationError{}

// Validate checks the field values on ToggleGlobalStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleGlobalStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleGlobalStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleGlobalStatusResponseMultiError, or nil if none found.
func (m *ToggleGlobalStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleGlobalStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ToggleGlobalStatusResponseMultiError(errors)
	}

	return nil
}

// ToggleGlobalStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ToggleGlobalStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type ToggleGlobalStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleGlobalStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleGlobalStatusResponseMultiError) AllErrors() []error { return m }

// ToggleGlobalStatusResponseValidationError is the validation error returned
// by ToggleGlobalStatusResponse.Validate if the designated constraints aren't met.
type ToggleGlobalStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleGlobalStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleGlobalStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleGlobalStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleGlobalStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleGlobalStatusResponseValidationError) ErrorName() string {
	return "ToggleGlobalStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleGlobalStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleGlobalStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleGlobalStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleGlobalStatusResponseValidationError{}
