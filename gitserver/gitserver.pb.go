// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: gitserver/gitserver.proto

package gitserver

import (
	reflect "reflect"
	sync "sync"

	mars "github.com/duc-cnzj/mars-client/v3/mars"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	ProjectId   string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GitDestroyRequest) Reset() {
	*x = GitDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDestroyRequest) ProtoMessage() {}

func (x *GitDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDestroyRequest.ProtoReflect.Descriptor instead.
func (*GitDestroyRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{0}
}

func (x *GitDestroyRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GitDestroyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GitEnableProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
}

func (x *GitEnableProjectRequest) Reset() {
	*x = GitEnableProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitEnableProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitEnableProjectRequest) ProtoMessage() {}

func (x *GitEnableProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitEnableProjectRequest.ProtoReflect.Descriptor instead.
func (*GitEnableProjectRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{1}
}

func (x *GitEnableProjectRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

type GitDisableProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
}

func (x *GitDisableProjectRequest) Reset() {
	*x = GitDisableProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDisableProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDisableProjectRequest) ProtoMessage() {}

func (x *GitDisableProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDisableProjectRequest.ProtoReflect.Descriptor instead.
func (*GitDisableProjectRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{2}
}

func (x *GitDisableProjectRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

type GitProjectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path          string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	WebUrl        string `protobuf:"bytes,4,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	AvatarUrl     string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Enabled       bool   `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GlobalEnabled bool   `protobuf:"varint,8,opt,name=global_enabled,json=globalEnabled,proto3" json:"global_enabled,omitempty"`
}

func (x *GitProjectItem) Reset() {
	*x = GitProjectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProjectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProjectItem) ProtoMessage() {}

func (x *GitProjectItem) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProjectItem.ProtoReflect.Descriptor instead.
func (*GitProjectItem) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{3}
}

func (x *GitProjectItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitProjectItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitProjectItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitProjectItem) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *GitProjectItem) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitProjectItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GitProjectItem) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GitProjectItem) GetGlobalEnabled() bool {
	if x != nil {
		return x.GlobalEnabled
	}
	return false
}

type GitAllProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GitProjectItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GitAllProjectsResponse) Reset() {
	*x = GitAllProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitAllProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitAllProjectsResponse) ProtoMessage() {}

func (x *GitAllProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitAllProjectsResponse.ProtoReflect.Descriptor instead.
func (*GitAllProjectsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{4}
}

func (x *GitAllProjectsResponse) GetData() []*GitProjectItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GitOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// isLeaf 兼容 antd
	IsLeaf    bool   `protobuf:"varint,4,opt,name=isLeaf,proto3" json:"isLeaf,omitempty"`
	ProjectId string `protobuf:"bytes,5,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Branch    string `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitOption) Reset() {
	*x = GitOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitOption) ProtoMessage() {}

func (x *GitOption) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitOption.ProtoReflect.Descriptor instead.
func (*GitOption) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{5}
}

func (x *GitOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GitOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GitOption) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GitOption) GetIsLeaf() bool {
	if x != nil {
		return x.IsLeaf
	}
	return false
}

func (x *GitOption) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitOption) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitProjectOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GitOption `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GitProjectOptionsResponse) Reset() {
	*x = GitProjectOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProjectOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProjectOptionsResponse) ProtoMessage() {}

func (x *GitProjectOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProjectOptionsResponse.ProtoReflect.Descriptor instead.
func (*GitProjectOptionsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{6}
}

func (x *GitProjectOptionsResponse) GetData() []*GitOption {
	if x != nil {
		return x.Data
	}
	return nil
}

type GitBranchOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	All       bool   `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *GitBranchOptionsRequest) Reset() {
	*x = GitBranchOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitBranchOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitBranchOptionsRequest) ProtoMessage() {}

func (x *GitBranchOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitBranchOptionsRequest.ProtoReflect.Descriptor instead.
func (*GitBranchOptionsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{7}
}

func (x *GitBranchOptionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitBranchOptionsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GitBranchOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GitOption `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GitBranchOptionsResponse) Reset() {
	*x = GitBranchOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitBranchOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitBranchOptionsResponse) ProtoMessage() {}

func (x *GitBranchOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitBranchOptionsResponse.ProtoReflect.Descriptor instead.
func (*GitBranchOptionsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{8}
}

func (x *GitBranchOptionsResponse) GetData() []*GitOption {
	if x != nil {
		return x.Data
	}
	return nil
}

type GitCommitOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch    string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitCommitOptionsRequest) Reset() {
	*x = GitCommitOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitOptionsRequest) ProtoMessage() {}

func (x *GitCommitOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitOptionsRequest.ProtoReflect.Descriptor instead.
func (*GitCommitOptionsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{9}
}

func (x *GitCommitOptionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitCommitOptionsRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitCommitOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GitOption `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GitCommitOptionsResponse) Reset() {
	*x = GitCommitOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitOptionsResponse) ProtoMessage() {}

func (x *GitCommitOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitOptionsResponse.ProtoReflect.Descriptor instead.
func (*GitCommitOptionsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{10}
}

func (x *GitCommitOptionsResponse) GetData() []*GitOption {
	if x != nil {
		return x.Data
	}
	return nil
}

type GitCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch    string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitCommitRequest) Reset() {
	*x = GitCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitRequest) ProtoMessage() {}

func (x *GitCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitRequest.ProtoReflect.Descriptor instead.
func (*GitCommitRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{11}
}

func (x *GitCommitRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitCommitRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type GitCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GitOption `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GitCommitResponse) Reset() {
	*x = GitCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitResponse) ProtoMessage() {}

func (x *GitCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitResponse.ProtoReflect.Descriptor instead.
func (*GitCommitResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{12}
}

func (x *GitCommitResponse) GetData() *GitOption {
	if x != nil {
		return x.Data
	}
	return nil
}

type GitPipelineInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch    string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitPipelineInfoRequest) Reset() {
	*x = GitPipelineInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitPipelineInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitPipelineInfoRequest) ProtoMessage() {}

func (x *GitPipelineInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitPipelineInfoRequest.ProtoReflect.Descriptor instead.
func (*GitPipelineInfoRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{13}
}

func (x *GitPipelineInfoRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitPipelineInfoRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitPipelineInfoRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type GitPipelineInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WebUrl string `protobuf:"bytes,2,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *GitPipelineInfoResponse) Reset() {
	*x = GitPipelineInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitPipelineInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitPipelineInfoResponse) ProtoMessage() {}

func (x *GitPipelineInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitPipelineInfoResponse.ProtoReflect.Descriptor instead.
func (*GitPipelineInfoResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{14}
}

func (x *GitPipelineInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GitPipelineInfoResponse) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type GitConfigFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch    string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitConfigFileRequest) Reset() {
	*x = GitConfigFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigFileRequest) ProtoMessage() {}

func (x *GitConfigFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigFileRequest.ProtoReflect.Descriptor instead.
func (*GitConfigFileRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{15}
}

func (x *GitConfigFileRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitConfigFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitConfigFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     string          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type     string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Elements []*mars.Element `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *GitConfigFileResponse) Reset() {
	*x = GitConfigFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigFileResponse) ProtoMessage() {}

func (x *GitConfigFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigFileResponse.ProtoReflect.Descriptor instead.
func (*GitConfigFileResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{16}
}

func (x *GitConfigFileResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GitConfigFileResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GitConfigFileResponse) GetElements() []*mars.Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

type GitEnableProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitEnableProjectResponse) Reset() {
	*x = GitEnableProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitEnableProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitEnableProjectResponse) ProtoMessage() {}

func (x *GitEnableProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitEnableProjectResponse.ProtoReflect.Descriptor instead.
func (*GitEnableProjectResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{17}
}

type GitDisableProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitDisableProjectResponse) Reset() {
	*x = GitDisableProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDisableProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDisableProjectResponse) ProtoMessage() {}

func (x *GitDisableProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDisableProjectResponse.ProtoReflect.Descriptor instead.
func (*GitDisableProjectResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{18}
}

type GitAllProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitAllProjectsRequest) Reset() {
	*x = GitAllProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitAllProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitAllProjectsRequest) ProtoMessage() {}

func (x *GitAllProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitAllProjectsRequest.ProtoReflect.Descriptor instead.
func (*GitAllProjectsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{19}
}

type GitProjectOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitProjectOptionsRequest) Reset() {
	*x = GitProjectOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_gitserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProjectOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProjectOptionsRequest) ProtoMessage() {}

func (x *GitProjectOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_gitserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProjectOptionsRequest.ProtoReflect.Descriptor instead.
func (*GitProjectOptionsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_gitserver_proto_rawDescGZIP(), []int{20}
}

var File_gitserver_gitserver_proto protoreflect.FileDescriptor

var file_gitserver_gitserver_proto_rawDesc = []byte{
	0x0a, 0x19, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x6d, 0x61, 0x72, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x11, 0x47, 0x69, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x17,
	0x47, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77,
	0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x22, 0x3b, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x53, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x50, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47,
	0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c,
	0x0a, 0x10, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x33, 0x0a, 0x11,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x4a, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55,
	0x72, 0x6c, 0x22, 0x5f, 0x0a, 0x14, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x69,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18,
	0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x89, 0x09, 0x0a, 0x09, 0x47, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x47, 0x69, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x47, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x47, 0x69,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x47, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x11, 0x2e, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x47, 0x69, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x12,
	0x55, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x7d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44,
	0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f,
	0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x75, 0x63, 0x2d, 0x63, 0x6e, 0x7a, 0x6a, 0x2f, 0x6d, 0x61, 0x72, 0x73,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x3b, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitserver_gitserver_proto_rawDescOnce sync.Once
	file_gitserver_gitserver_proto_rawDescData = file_gitserver_gitserver_proto_rawDesc
)

func file_gitserver_gitserver_proto_rawDescGZIP() []byte {
	file_gitserver_gitserver_proto_rawDescOnce.Do(func() {
		file_gitserver_gitserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitserver_gitserver_proto_rawDescData)
	})
	return file_gitserver_gitserver_proto_rawDescData
}

var file_gitserver_gitserver_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_gitserver_gitserver_proto_goTypes = []interface{}{
	(*GitDestroyRequest)(nil),         // 0: GitDestroyRequest
	(*GitEnableProjectRequest)(nil),   // 1: GitEnableProjectRequest
	(*GitDisableProjectRequest)(nil),  // 2: GitDisableProjectRequest
	(*GitProjectItem)(nil),            // 3: GitProjectItem
	(*GitAllProjectsResponse)(nil),    // 4: GitAllProjectsResponse
	(*GitOption)(nil),                 // 5: GitOption
	(*GitProjectOptionsResponse)(nil), // 6: GitProjectOptionsResponse
	(*GitBranchOptionsRequest)(nil),   // 7: GitBranchOptionsRequest
	(*GitBranchOptionsResponse)(nil),  // 8: GitBranchOptionsResponse
	(*GitCommitOptionsRequest)(nil),   // 9: GitCommitOptionsRequest
	(*GitCommitOptionsResponse)(nil),  // 10: GitCommitOptionsResponse
	(*GitCommitRequest)(nil),          // 11: GitCommitRequest
	(*GitCommitResponse)(nil),         // 12: GitCommitResponse
	(*GitPipelineInfoRequest)(nil),    // 13: GitPipelineInfoRequest
	(*GitPipelineInfoResponse)(nil),   // 14: GitPipelineInfoResponse
	(*GitConfigFileRequest)(nil),      // 15: GitConfigFileRequest
	(*GitConfigFileResponse)(nil),     // 16: GitConfigFileResponse
	(*GitEnableProjectResponse)(nil),  // 17: GitEnableProjectResponse
	(*GitDisableProjectResponse)(nil), // 18: GitDisableProjectResponse
	(*GitAllProjectsRequest)(nil),     // 19: GitAllProjectsRequest
	(*GitProjectOptionsRequest)(nil),  // 20: GitProjectOptionsRequest
	(*mars.Element)(nil),              // 21: Element
}
var file_gitserver_gitserver_proto_depIdxs = []int32{
	3,  // 0: GitAllProjectsResponse.data:type_name -> GitProjectItem
	5,  // 1: GitProjectOptionsResponse.data:type_name -> GitOption
	5,  // 2: GitBranchOptionsResponse.data:type_name -> GitOption
	5,  // 3: GitCommitOptionsResponse.data:type_name -> GitOption
	5,  // 4: GitCommitResponse.data:type_name -> GitOption
	21, // 5: GitConfigFileResponse.elements:type_name -> Element
	1,  // 6: GitServer.EnableProject:input_type -> GitEnableProjectRequest
	2,  // 7: GitServer.DisableProject:input_type -> GitDisableProjectRequest
	19, // 8: GitServer.All:input_type -> GitAllProjectsRequest
	20, // 9: GitServer.ProjectOptions:input_type -> GitProjectOptionsRequest
	7,  // 10: GitServer.BranchOptions:input_type -> GitBranchOptionsRequest
	9,  // 11: GitServer.CommitOptions:input_type -> GitCommitOptionsRequest
	11, // 12: GitServer.Commit:input_type -> GitCommitRequest
	13, // 13: GitServer.PipelineInfo:input_type -> GitPipelineInfoRequest
	15, // 14: GitServer.MarsConfigFile:input_type -> GitConfigFileRequest
	17, // 15: GitServer.EnableProject:output_type -> GitEnableProjectResponse
	18, // 16: GitServer.DisableProject:output_type -> GitDisableProjectResponse
	4,  // 17: GitServer.All:output_type -> GitAllProjectsResponse
	6,  // 18: GitServer.ProjectOptions:output_type -> GitProjectOptionsResponse
	8,  // 19: GitServer.BranchOptions:output_type -> GitBranchOptionsResponse
	10, // 20: GitServer.CommitOptions:output_type -> GitCommitOptionsResponse
	12, // 21: GitServer.Commit:output_type -> GitCommitResponse
	14, // 22: GitServer.PipelineInfo:output_type -> GitPipelineInfoResponse
	16, // 23: GitServer.MarsConfigFile:output_type -> GitConfigFileResponse
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_gitserver_gitserver_proto_init() }
func file_gitserver_gitserver_proto_init() {
	if File_gitserver_gitserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitserver_gitserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitEnableProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDisableProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProjectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitAllProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProjectOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitBranchOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitBranchOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitPipelineInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitPipelineInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitEnableProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDisableProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitAllProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_gitserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProjectOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitserver_gitserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitserver_gitserver_proto_goTypes,
		DependencyIndexes: file_gitserver_gitserver_proto_depIdxs,
		MessageInfos:      file_gitserver_gitserver_proto_msgTypes,
	}.Build()
	File_gitserver_gitserver_proto = out.File
	file_gitserver_gitserver_proto_rawDesc = nil
	file_gitserver_gitserver_proto_goTypes = nil
	file_gitserver_gitserver_proto_depIdxs = nil
}
