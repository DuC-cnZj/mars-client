// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gitserver

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitServerClient is the client API for GitServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitServerClient interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(ctx context.Context, in *GitEnableProjectRequest, opts ...grpc.CallOption) (*GitEnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(ctx context.Context, in *GitDisableProjectRequest, opts ...grpc.CallOption) (*GitDisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(ctx context.Context, in *GitAllProjectsRequest, opts ...grpc.CallOption) (*GitAllProjectsResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(ctx context.Context, in *GitProjectOptionsRequest, opts ...grpc.CallOption) (*GitProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(ctx context.Context, in *GitBranchOptionsRequest, opts ...grpc.CallOption) (*GitBranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(ctx context.Context, in *GitCommitOptionsRequest, opts ...grpc.CallOption) (*GitCommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(ctx context.Context, in *GitCommitRequest, opts ...grpc.CallOption) (*GitCommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(ctx context.Context, in *GitPipelineInfoRequest, opts ...grpc.CallOption) (*GitPipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(ctx context.Context, in *GitConfigFileRequest, opts ...grpc.CallOption) (*GitConfigFileResponse, error)
}

type gitServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGitServerClient(cc grpc.ClientConnInterface) GitServerClient {
	return &gitServerClient{cc}
}

func (c *gitServerClient) EnableProject(ctx context.Context, in *GitEnableProjectRequest, opts ...grpc.CallOption) (*GitEnableProjectResponse, error) {
	out := new(GitEnableProjectResponse)
	err := c.cc.Invoke(ctx, "/GitServer/EnableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) DisableProject(ctx context.Context, in *GitDisableProjectRequest, opts ...grpc.CallOption) (*GitDisableProjectResponse, error) {
	out := new(GitDisableProjectResponse)
	err := c.cc.Invoke(ctx, "/GitServer/DisableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) All(ctx context.Context, in *GitAllProjectsRequest, opts ...grpc.CallOption) (*GitAllProjectsResponse, error) {
	out := new(GitAllProjectsResponse)
	err := c.cc.Invoke(ctx, "/GitServer/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) ProjectOptions(ctx context.Context, in *GitProjectOptionsRequest, opts ...grpc.CallOption) (*GitProjectOptionsResponse, error) {
	out := new(GitProjectOptionsResponse)
	err := c.cc.Invoke(ctx, "/GitServer/ProjectOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) BranchOptions(ctx context.Context, in *GitBranchOptionsRequest, opts ...grpc.CallOption) (*GitBranchOptionsResponse, error) {
	out := new(GitBranchOptionsResponse)
	err := c.cc.Invoke(ctx, "/GitServer/BranchOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) CommitOptions(ctx context.Context, in *GitCommitOptionsRequest, opts ...grpc.CallOption) (*GitCommitOptionsResponse, error) {
	out := new(GitCommitOptionsResponse)
	err := c.cc.Invoke(ctx, "/GitServer/CommitOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) Commit(ctx context.Context, in *GitCommitRequest, opts ...grpc.CallOption) (*GitCommitResponse, error) {
	out := new(GitCommitResponse)
	err := c.cc.Invoke(ctx, "/GitServer/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) PipelineInfo(ctx context.Context, in *GitPipelineInfoRequest, opts ...grpc.CallOption) (*GitPipelineInfoResponse, error) {
	out := new(GitPipelineInfoResponse)
	err := c.cc.Invoke(ctx, "/GitServer/PipelineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServerClient) MarsConfigFile(ctx context.Context, in *GitConfigFileRequest, opts ...grpc.CallOption) (*GitConfigFileResponse, error) {
	out := new(GitConfigFileResponse)
	err := c.cc.Invoke(ctx, "/GitServer/MarsConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServerServer is the server API for GitServer service.
// All implementations must embed UnimplementedGitServerServer
// for forward compatibility
type GitServerServer interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(context.Context, *GitEnableProjectRequest) (*GitEnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(context.Context, *GitDisableProjectRequest) (*GitDisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(context.Context, *GitAllProjectsRequest) (*GitAllProjectsResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(context.Context, *GitProjectOptionsRequest) (*GitProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(context.Context, *GitBranchOptionsRequest) (*GitBranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(context.Context, *GitCommitOptionsRequest) (*GitCommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(context.Context, *GitCommitRequest) (*GitCommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(context.Context, *GitPipelineInfoRequest) (*GitPipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(context.Context, *GitConfigFileRequest) (*GitConfigFileResponse, error)
	mustEmbedUnimplementedGitServerServer()
}

// UnimplementedGitServerServer must be embedded to have forward compatible implementations.
type UnimplementedGitServerServer struct {
}

func (UnimplementedGitServerServer) EnableProject(context.Context, *GitEnableProjectRequest) (*GitEnableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedGitServerServer) DisableProject(context.Context, *GitDisableProjectRequest) (*GitDisableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProject not implemented")
}
func (UnimplementedGitServerServer) All(context.Context, *GitAllProjectsRequest) (*GitAllProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedGitServerServer) ProjectOptions(context.Context, *GitProjectOptionsRequest) (*GitProjectOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectOptions not implemented")
}
func (UnimplementedGitServerServer) BranchOptions(context.Context, *GitBranchOptionsRequest) (*GitBranchOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchOptions not implemented")
}
func (UnimplementedGitServerServer) CommitOptions(context.Context, *GitCommitOptionsRequest) (*GitCommitOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOptions not implemented")
}
func (UnimplementedGitServerServer) Commit(context.Context, *GitCommitRequest) (*GitCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedGitServerServer) PipelineInfo(context.Context, *GitPipelineInfoRequest) (*GitPipelineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineInfo not implemented")
}
func (UnimplementedGitServerServer) MarsConfigFile(context.Context, *GitConfigFileRequest) (*GitConfigFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarsConfigFile not implemented")
}
func (UnimplementedGitServerServer) mustEmbedUnimplementedGitServerServer() {}

// UnsafeGitServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServerServer will
// result in compilation errors.
type UnsafeGitServerServer interface {
	mustEmbedUnimplementedGitServerServer()
}

func RegisterGitServerServer(s grpc.ServiceRegistrar, srv GitServerServer) {
	s.RegisterService(&GitServer_ServiceDesc, srv)
}

func _GitServer_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitEnableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/EnableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).EnableProject(ctx, req.(*GitEnableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_DisableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitDisableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).DisableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/DisableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).DisableProject(ctx, req.(*GitDisableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitAllProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).All(ctx, req.(*GitAllProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_ProjectOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).ProjectOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/ProjectOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).ProjectOptions(ctx, req.(*GitProjectOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_BranchOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitBranchOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).BranchOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/BranchOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).BranchOptions(ctx, req.(*GitBranchOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_CommitOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCommitOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).CommitOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/CommitOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).CommitOptions(ctx, req.(*GitCommitOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).Commit(ctx, req.(*GitCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_PipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitPipelineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).PipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/PipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).PipelineInfo(ctx, req.(*GitPipelineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitServer_MarsConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServerServer).MarsConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitServer/MarsConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServerServer).MarsConfigFile(ctx, req.(*GitConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitServer_ServiceDesc is the grpc.ServiceDesc for GitServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GitServer",
	HandlerType: (*GitServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableProject",
			Handler:    _GitServer_EnableProject_Handler,
		},
		{
			MethodName: "DisableProject",
			Handler:    _GitServer_DisableProject_Handler,
		},
		{
			MethodName: "All",
			Handler:    _GitServer_All_Handler,
		},
		{
			MethodName: "ProjectOptions",
			Handler:    _GitServer_ProjectOptions_Handler,
		},
		{
			MethodName: "BranchOptions",
			Handler:    _GitServer_BranchOptions_Handler,
		},
		{
			MethodName: "CommitOptions",
			Handler:    _GitServer_CommitOptions_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _GitServer_Commit_Handler,
		},
		{
			MethodName: "PipelineInfo",
			Handler:    _GitServer_PipelineInfo_Handler,
		},
		{
			MethodName: "MarsConfigFile",
			Handler:    _GitServer_MarsConfigFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitserver/gitserver.proto",
}
