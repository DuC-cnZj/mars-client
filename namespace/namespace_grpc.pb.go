// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package namespace

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceClient interface {
	// All 获取所有的名称空间
	All(ctx context.Context, in *NamespaceAllRequest, opts ...grpc.CallOption) (*NamespaceAllResponse, error)
	// Create 创建名称空间
	Create(ctx context.Context, in *NamespaceCreateRequest, opts ...grpc.CallOption) (*NamespaceCreateResponse, error)
	// Show 查看名称空间详情
	Show(ctx context.Context, in *NamespaceShowRequest, opts ...grpc.CallOption) (*NamespaceShowResponse, error)
	// Delete 删除名称空间
	Delete(ctx context.Context, in *NamespaceDeleteRequest, opts ...grpc.CallOption) (*NamespaceDeleteResponse, error)
	// IsExists 名称空间是否存在
	IsExists(ctx context.Context, in *NamespaceIsExistsRequest, opts ...grpc.CallOption) (*NamespaceIsExistsResponse, error)
	// CpuMemory 名称空间总共使用的 cpu memory
	CpuMemory(ctx context.Context, in *NamespaceCpuMemoryRequest, opts ...grpc.CallOption) (*NamespaceCpuMemoryResponse, error)
	// ServiceEndpoints 名称空间下面所有服务的 endpoint
	ServiceEndpoints(ctx context.Context, in *NamespaceServiceEndpointsRequest, opts ...grpc.CallOption) (*NamespaceServiceEndpointsResponse, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) All(ctx context.Context, in *NamespaceAllRequest, opts ...grpc.CallOption) (*NamespaceAllResponse, error) {
	out := new(NamespaceAllResponse)
	err := c.cc.Invoke(ctx, "/Namespace/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Create(ctx context.Context, in *NamespaceCreateRequest, opts ...grpc.CallOption) (*NamespaceCreateResponse, error) {
	out := new(NamespaceCreateResponse)
	err := c.cc.Invoke(ctx, "/Namespace/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Show(ctx context.Context, in *NamespaceShowRequest, opts ...grpc.CallOption) (*NamespaceShowResponse, error) {
	out := new(NamespaceShowResponse)
	err := c.cc.Invoke(ctx, "/Namespace/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Delete(ctx context.Context, in *NamespaceDeleteRequest, opts ...grpc.CallOption) (*NamespaceDeleteResponse, error) {
	out := new(NamespaceDeleteResponse)
	err := c.cc.Invoke(ctx, "/Namespace/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) IsExists(ctx context.Context, in *NamespaceIsExistsRequest, opts ...grpc.CallOption) (*NamespaceIsExistsResponse, error) {
	out := new(NamespaceIsExistsResponse)
	err := c.cc.Invoke(ctx, "/Namespace/IsExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) CpuMemory(ctx context.Context, in *NamespaceCpuMemoryRequest, opts ...grpc.CallOption) (*NamespaceCpuMemoryResponse, error) {
	out := new(NamespaceCpuMemoryResponse)
	err := c.cc.Invoke(ctx, "/Namespace/CpuMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) ServiceEndpoints(ctx context.Context, in *NamespaceServiceEndpointsRequest, opts ...grpc.CallOption) (*NamespaceServiceEndpointsResponse, error) {
	out := new(NamespaceServiceEndpointsResponse)
	err := c.cc.Invoke(ctx, "/Namespace/ServiceEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
// All implementations must embed UnimplementedNamespaceServer
// for forward compatibility
type NamespaceServer interface {
	// All 获取所有的名称空间
	All(context.Context, *NamespaceAllRequest) (*NamespaceAllResponse, error)
	// Create 创建名称空间
	Create(context.Context, *NamespaceCreateRequest) (*NamespaceCreateResponse, error)
	// Show 查看名称空间详情
	Show(context.Context, *NamespaceShowRequest) (*NamespaceShowResponse, error)
	// Delete 删除名称空间
	Delete(context.Context, *NamespaceDeleteRequest) (*NamespaceDeleteResponse, error)
	// IsExists 名称空间是否存在
	IsExists(context.Context, *NamespaceIsExistsRequest) (*NamespaceIsExistsResponse, error)
	// CpuMemory 名称空间总共使用的 cpu memory
	CpuMemory(context.Context, *NamespaceCpuMemoryRequest) (*NamespaceCpuMemoryResponse, error)
	// ServiceEndpoints 名称空间下面所有服务的 endpoint
	ServiceEndpoints(context.Context, *NamespaceServiceEndpointsRequest) (*NamespaceServiceEndpointsResponse, error)
	mustEmbedUnimplementedNamespaceServer()
}

// UnimplementedNamespaceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (UnimplementedNamespaceServer) All(context.Context, *NamespaceAllRequest) (*NamespaceAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedNamespaceServer) Create(context.Context, *NamespaceCreateRequest) (*NamespaceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNamespaceServer) Show(context.Context, *NamespaceShowRequest) (*NamespaceShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedNamespaceServer) Delete(context.Context, *NamespaceDeleteRequest) (*NamespaceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNamespaceServer) IsExists(context.Context, *NamespaceIsExistsRequest) (*NamespaceIsExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExists not implemented")
}
func (UnimplementedNamespaceServer) CpuMemory(context.Context, *NamespaceCpuMemoryRequest) (*NamespaceCpuMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CpuMemory not implemented")
}
func (UnimplementedNamespaceServer) ServiceEndpoints(context.Context, *NamespaceServiceEndpointsRequest) (*NamespaceServiceEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceEndpoints not implemented")
}
func (UnimplementedNamespaceServer) mustEmbedUnimplementedNamespaceServer() {}

// UnsafeNamespaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServer will
// result in compilation errors.
type UnsafeNamespaceServer interface {
	mustEmbedUnimplementedNamespaceServer()
}

func RegisterNamespaceServer(s grpc.ServiceRegistrar, srv NamespaceServer) {
	s.RegisterService(&Namespace_ServiceDesc, srv)
}

func _Namespace_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).All(ctx, req.(*NamespaceAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Create(ctx, req.(*NamespaceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Show(ctx, req.(*NamespaceShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Delete(ctx, req.(*NamespaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_IsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceIsExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).IsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/IsExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).IsExists(ctx, req.(*NamespaceIsExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_CpuMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceCpuMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).CpuMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/CpuMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).CpuMemory(ctx, req.(*NamespaceCpuMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_ServiceEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ServiceEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Namespace/ServiceEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ServiceEndpoints(ctx, req.(*NamespaceServiceEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespace_ServiceDesc is the grpc.ServiceDesc for Namespace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _Namespace_All_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Namespace_Create_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Namespace_Show_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Namespace_Delete_Handler,
		},
		{
			MethodName: "IsExists",
			Handler:    _Namespace_IsExists_Handler,
		},
		{
			MethodName: "CpuMemory",
			Handler:    _Namespace_CpuMemory_Handler,
		},
		{
			MethodName: "ServiceEndpoints",
			Handler:    _Namespace_ServiceEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespace/namespace.proto",
}
