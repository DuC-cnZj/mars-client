// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: gitproject/gitproject.proto

package gitproject

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitProjectClient is the client API for GitProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitProjectClient interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(ctx context.Context, in *GitEnableProjectRequest, opts ...grpc.CallOption) (*GitEnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(ctx context.Context, in *GitDisableProjectRequest, opts ...grpc.CallOption) (*GitDisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(ctx context.Context, in *GitAllProjectsRequest, opts ...grpc.CallOption) (*GitAllProjectsResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(ctx context.Context, in *GitProjectOptionsRequest, opts ...grpc.CallOption) (*GitProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(ctx context.Context, in *GitBranchOptionsRequest, opts ...grpc.CallOption) (*GitBranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(ctx context.Context, in *GitCommitOptionsRequest, opts ...grpc.CallOption) (*GitCommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(ctx context.Context, in *GitCommitRequest, opts ...grpc.CallOption) (*GitCommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(ctx context.Context, in *GitPipelineInfoRequest, opts ...grpc.CallOption) (*GitPipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(ctx context.Context, in *GitConfigFileRequest, opts ...grpc.CallOption) (*GitConfigFileResponse, error)
}

type gitProjectClient struct {
	cc grpc.ClientConnInterface
}

func NewGitProjectClient(cc grpc.ClientConnInterface) GitProjectClient {
	return &gitProjectClient{cc}
}

func (c *gitProjectClient) EnableProject(ctx context.Context, in *GitEnableProjectRequest, opts ...grpc.CallOption) (*GitEnableProjectResponse, error) {
	out := new(GitEnableProjectResponse)
	err := c.cc.Invoke(ctx, "/GitProject/EnableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) DisableProject(ctx context.Context, in *GitDisableProjectRequest, opts ...grpc.CallOption) (*GitDisableProjectResponse, error) {
	out := new(GitDisableProjectResponse)
	err := c.cc.Invoke(ctx, "/GitProject/DisableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) All(ctx context.Context, in *GitAllProjectsRequest, opts ...grpc.CallOption) (*GitAllProjectsResponse, error) {
	out := new(GitAllProjectsResponse)
	err := c.cc.Invoke(ctx, "/GitProject/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) ProjectOptions(ctx context.Context, in *GitProjectOptionsRequest, opts ...grpc.CallOption) (*GitProjectOptionsResponse, error) {
	out := new(GitProjectOptionsResponse)
	err := c.cc.Invoke(ctx, "/GitProject/ProjectOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) BranchOptions(ctx context.Context, in *GitBranchOptionsRequest, opts ...grpc.CallOption) (*GitBranchOptionsResponse, error) {
	out := new(GitBranchOptionsResponse)
	err := c.cc.Invoke(ctx, "/GitProject/BranchOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) CommitOptions(ctx context.Context, in *GitCommitOptionsRequest, opts ...grpc.CallOption) (*GitCommitOptionsResponse, error) {
	out := new(GitCommitOptionsResponse)
	err := c.cc.Invoke(ctx, "/GitProject/CommitOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) Commit(ctx context.Context, in *GitCommitRequest, opts ...grpc.CallOption) (*GitCommitResponse, error) {
	out := new(GitCommitResponse)
	err := c.cc.Invoke(ctx, "/GitProject/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) PipelineInfo(ctx context.Context, in *GitPipelineInfoRequest, opts ...grpc.CallOption) (*GitPipelineInfoResponse, error) {
	out := new(GitPipelineInfoResponse)
	err := c.cc.Invoke(ctx, "/GitProject/PipelineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectClient) MarsConfigFile(ctx context.Context, in *GitConfigFileRequest, opts ...grpc.CallOption) (*GitConfigFileResponse, error) {
	out := new(GitConfigFileResponse)
	err := c.cc.Invoke(ctx, "/GitProject/MarsConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitProjectServer is the server API for GitProject service.
// All implementations must embed UnimplementedGitProjectServer
// for forward compatibility
type GitProjectServer interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(context.Context, *GitEnableProjectRequest) (*GitEnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(context.Context, *GitDisableProjectRequest) (*GitDisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(context.Context, *GitAllProjectsRequest) (*GitAllProjectsResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(context.Context, *GitProjectOptionsRequest) (*GitProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(context.Context, *GitBranchOptionsRequest) (*GitBranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(context.Context, *GitCommitOptionsRequest) (*GitCommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(context.Context, *GitCommitRequest) (*GitCommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(context.Context, *GitPipelineInfoRequest) (*GitPipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(context.Context, *GitConfigFileRequest) (*GitConfigFileResponse, error)
	mustEmbedUnimplementedGitProjectServer()
}

// UnimplementedGitProjectServer must be embedded to have forward compatible implementations.
type UnimplementedGitProjectServer struct {
}

func (UnimplementedGitProjectServer) EnableProject(context.Context, *GitEnableProjectRequest) (*GitEnableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedGitProjectServer) DisableProject(context.Context, *GitDisableProjectRequest) (*GitDisableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProject not implemented")
}
func (UnimplementedGitProjectServer) All(context.Context, *GitAllProjectsRequest) (*GitAllProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedGitProjectServer) ProjectOptions(context.Context, *GitProjectOptionsRequest) (*GitProjectOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectOptions not implemented")
}
func (UnimplementedGitProjectServer) BranchOptions(context.Context, *GitBranchOptionsRequest) (*GitBranchOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchOptions not implemented")
}
func (UnimplementedGitProjectServer) CommitOptions(context.Context, *GitCommitOptionsRequest) (*GitCommitOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOptions not implemented")
}
func (UnimplementedGitProjectServer) Commit(context.Context, *GitCommitRequest) (*GitCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedGitProjectServer) PipelineInfo(context.Context, *GitPipelineInfoRequest) (*GitPipelineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineInfo not implemented")
}
func (UnimplementedGitProjectServer) MarsConfigFile(context.Context, *GitConfigFileRequest) (*GitConfigFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarsConfigFile not implemented")
}
func (UnimplementedGitProjectServer) mustEmbedUnimplementedGitProjectServer() {}

// UnsafeGitProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitProjectServer will
// result in compilation errors.
type UnsafeGitProjectServer interface {
	mustEmbedUnimplementedGitProjectServer()
}

func RegisterGitProjectServer(s grpc.ServiceRegistrar, srv GitProjectServer) {
	s.RegisterService(&GitProject_ServiceDesc, srv)
}

func _GitProject_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitEnableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/EnableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).EnableProject(ctx, req.(*GitEnableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_DisableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitDisableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).DisableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/DisableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).DisableProject(ctx, req.(*GitDisableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitAllProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).All(ctx, req.(*GitAllProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_ProjectOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).ProjectOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/ProjectOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).ProjectOptions(ctx, req.(*GitProjectOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_BranchOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitBranchOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).BranchOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/BranchOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).BranchOptions(ctx, req.(*GitBranchOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_CommitOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCommitOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).CommitOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/CommitOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).CommitOptions(ctx, req.(*GitCommitOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).Commit(ctx, req.(*GitCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_PipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitPipelineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).PipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/PipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).PipelineInfo(ctx, req.(*GitPipelineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProject_MarsConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectServer).MarsConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProject/MarsConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectServer).MarsConfigFile(ctx, req.(*GitConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitProject_ServiceDesc is the grpc.ServiceDesc for GitProject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitProject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GitProject",
	HandlerType: (*GitProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableProject",
			Handler:    _GitProject_EnableProject_Handler,
		},
		{
			MethodName: "DisableProject",
			Handler:    _GitProject_DisableProject_Handler,
		},
		{
			MethodName: "All",
			Handler:    _GitProject_All_Handler,
		},
		{
			MethodName: "ProjectOptions",
			Handler:    _GitProject_ProjectOptions_Handler,
		},
		{
			MethodName: "BranchOptions",
			Handler:    _GitProject_BranchOptions_Handler,
		},
		{
			MethodName: "CommitOptions",
			Handler:    _GitProject_CommitOptions_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _GitProject_Commit_Handler,
		},
		{
			MethodName: "PipelineInfo",
			Handler:    _GitProject_PipelineInfo_Handler,
		},
		{
			MethodName: "MarsConfigFile",
			Handler:    _GitProject_MarsConfigFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitproject/gitproject.proto",
}

// GitProjectConfigClient is the client API for GitProjectConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitProjectConfigClient interface {
	// Show 查看项目配置
	Show(ctx context.Context, in *GitProjectConfigShowRequest, opts ...grpc.CallOption) (*GitProjectConfigShowResponse, error)
	// GlobalConfig 查看项目 GlobalConfig 配置
	GlobalConfig(ctx context.Context, in *GitProjectConfigGlobalConfigRequest, opts ...grpc.CallOption) (*GitProjectConfigGlobalConfigResponse, error)
	// ToggleGlobalStatus 开启/关闭全局配置
	ToggleGlobalStatus(ctx context.Context, in *GitProjectConfigToggleGlobalStatusRequest, opts ...grpc.CallOption) (*GitProjectConfigToggleGlobalStatusResponse, error)
	// Update 更新全局配置
	Update(ctx context.Context, in *GitProjectConfigUpdateRequest, opts ...grpc.CallOption) (*GitProjectConfigUpdateResponse, error)
	// GetDefaultChartValues 获取项目 helm charts 的默认 values.yaml
	GetDefaultChartValues(ctx context.Context, in *GitProjectConfigDefaultChartValuesRequest, opts ...grpc.CallOption) (*GitProjectConfigDefaultChartValuesResponse, error)
}

type gitProjectConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewGitProjectConfigClient(cc grpc.ClientConnInterface) GitProjectConfigClient {
	return &gitProjectConfigClient{cc}
}

func (c *gitProjectConfigClient) Show(ctx context.Context, in *GitProjectConfigShowRequest, opts ...grpc.CallOption) (*GitProjectConfigShowResponse, error) {
	out := new(GitProjectConfigShowResponse)
	err := c.cc.Invoke(ctx, "/GitProjectConfig/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectConfigClient) GlobalConfig(ctx context.Context, in *GitProjectConfigGlobalConfigRequest, opts ...grpc.CallOption) (*GitProjectConfigGlobalConfigResponse, error) {
	out := new(GitProjectConfigGlobalConfigResponse)
	err := c.cc.Invoke(ctx, "/GitProjectConfig/GlobalConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectConfigClient) ToggleGlobalStatus(ctx context.Context, in *GitProjectConfigToggleGlobalStatusRequest, opts ...grpc.CallOption) (*GitProjectConfigToggleGlobalStatusResponse, error) {
	out := new(GitProjectConfigToggleGlobalStatusResponse)
	err := c.cc.Invoke(ctx, "/GitProjectConfig/ToggleGlobalStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectConfigClient) Update(ctx context.Context, in *GitProjectConfigUpdateRequest, opts ...grpc.CallOption) (*GitProjectConfigUpdateResponse, error) {
	out := new(GitProjectConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/GitProjectConfig/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProjectConfigClient) GetDefaultChartValues(ctx context.Context, in *GitProjectConfigDefaultChartValuesRequest, opts ...grpc.CallOption) (*GitProjectConfigDefaultChartValuesResponse, error) {
	out := new(GitProjectConfigDefaultChartValuesResponse)
	err := c.cc.Invoke(ctx, "/GitProjectConfig/GetDefaultChartValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitProjectConfigServer is the server API for GitProjectConfig service.
// All implementations must embed UnimplementedGitProjectConfigServer
// for forward compatibility
type GitProjectConfigServer interface {
	// Show 查看项目配置
	Show(context.Context, *GitProjectConfigShowRequest) (*GitProjectConfigShowResponse, error)
	// GlobalConfig 查看项目 GlobalConfig 配置
	GlobalConfig(context.Context, *GitProjectConfigGlobalConfigRequest) (*GitProjectConfigGlobalConfigResponse, error)
	// ToggleGlobalStatus 开启/关闭全局配置
	ToggleGlobalStatus(context.Context, *GitProjectConfigToggleGlobalStatusRequest) (*GitProjectConfigToggleGlobalStatusResponse, error)
	// Update 更新全局配置
	Update(context.Context, *GitProjectConfigUpdateRequest) (*GitProjectConfigUpdateResponse, error)
	// GetDefaultChartValues 获取项目 helm charts 的默认 values.yaml
	GetDefaultChartValues(context.Context, *GitProjectConfigDefaultChartValuesRequest) (*GitProjectConfigDefaultChartValuesResponse, error)
	mustEmbedUnimplementedGitProjectConfigServer()
}

// UnimplementedGitProjectConfigServer must be embedded to have forward compatible implementations.
type UnimplementedGitProjectConfigServer struct {
}

func (UnimplementedGitProjectConfigServer) Show(context.Context, *GitProjectConfigShowRequest) (*GitProjectConfigShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedGitProjectConfigServer) GlobalConfig(context.Context, *GitProjectConfigGlobalConfigRequest) (*GitProjectConfigGlobalConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalConfig not implemented")
}
func (UnimplementedGitProjectConfigServer) ToggleGlobalStatus(context.Context, *GitProjectConfigToggleGlobalStatusRequest) (*GitProjectConfigToggleGlobalStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleGlobalStatus not implemented")
}
func (UnimplementedGitProjectConfigServer) Update(context.Context, *GitProjectConfigUpdateRequest) (*GitProjectConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGitProjectConfigServer) GetDefaultChartValues(context.Context, *GitProjectConfigDefaultChartValuesRequest) (*GitProjectConfigDefaultChartValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultChartValues not implemented")
}
func (UnimplementedGitProjectConfigServer) mustEmbedUnimplementedGitProjectConfigServer() {}

// UnsafeGitProjectConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitProjectConfigServer will
// result in compilation errors.
type UnsafeGitProjectConfigServer interface {
	mustEmbedUnimplementedGitProjectConfigServer()
}

func RegisterGitProjectConfigServer(s grpc.ServiceRegistrar, srv GitProjectConfigServer) {
	s.RegisterService(&GitProjectConfig_ServiceDesc, srv)
}

func _GitProjectConfig_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectConfigShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectConfigServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProjectConfig/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectConfigServer).Show(ctx, req.(*GitProjectConfigShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProjectConfig_GlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectConfigGlobalConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectConfigServer).GlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProjectConfig/GlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectConfigServer).GlobalConfig(ctx, req.(*GitProjectConfigGlobalConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProjectConfig_ToggleGlobalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectConfigToggleGlobalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectConfigServer).ToggleGlobalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProjectConfig/ToggleGlobalStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectConfigServer).ToggleGlobalStatus(ctx, req.(*GitProjectConfigToggleGlobalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProjectConfig_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectConfigServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProjectConfig/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectConfigServer).Update(ctx, req.(*GitProjectConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProjectConfig_GetDefaultChartValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectConfigDefaultChartValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProjectConfigServer).GetDefaultChartValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitProjectConfig/GetDefaultChartValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProjectConfigServer).GetDefaultChartValues(ctx, req.(*GitProjectConfigDefaultChartValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitProjectConfig_ServiceDesc is the grpc.ServiceDesc for GitProjectConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitProjectConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GitProjectConfig",
	HandlerType: (*GitProjectConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _GitProjectConfig_Show_Handler,
		},
		{
			MethodName: "GlobalConfig",
			Handler:    _GitProjectConfig_GlobalConfig_Handler,
		},
		{
			MethodName: "ToggleGlobalStatus",
			Handler:    _GitProjectConfig_ToggleGlobalStatus_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GitProjectConfig_Update_Handler,
		},
		{
			MethodName: "GetDefaultChartValues",
			Handler:    _GitProjectConfig_GetDefaultChartValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitproject/gitproject.proto",
}
