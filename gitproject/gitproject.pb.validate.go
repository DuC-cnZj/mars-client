// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gitproject/gitproject.proto

package gitproject

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GitEnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitEnableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitEnableProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitEnableProjectRequestMultiError, or nil if none found.
func (m *GitEnableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitEnableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := GitEnableProjectRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GitEnableProjectRequestMultiError(errors)
	}

	return nil
}

// GitEnableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by GitEnableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type GitEnableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitEnableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitEnableProjectRequestMultiError) AllErrors() []error { return m }

// GitEnableProjectRequestValidationError is the validation error returned by
// GitEnableProjectRequest.Validate if the designated constraints aren't met.
type GitEnableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitEnableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitEnableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitEnableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitEnableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitEnableProjectRequestValidationError) ErrorName() string {
	return "GitEnableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitEnableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitEnableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitEnableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitEnableProjectRequestValidationError{}

// Validate checks the field values on GitDisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitDisableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitDisableProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitDisableProjectRequestMultiError, or nil if none found.
func (m *GitDisableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitDisableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := GitDisableProjectRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GitDisableProjectRequestMultiError(errors)
	}

	return nil
}

// GitDisableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by GitDisableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type GitDisableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitDisableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitDisableProjectRequestMultiError) AllErrors() []error { return m }

// GitDisableProjectRequestValidationError is the validation error returned by
// GitDisableProjectRequest.Validate if the designated constraints aren't met.
type GitDisableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitDisableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitDisableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitDisableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitDisableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitDisableProjectRequestValidationError) ErrorName() string {
	return "GitDisableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitDisableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitDisableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitDisableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitDisableProjectRequestValidationError{}

// Validate checks the field values on GitProjectItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitProjectItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GitProjectItemMultiError,
// or nil if none found.
func (m *GitProjectItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for WebUrl

	// no validation rules for AvatarUrl

	// no validation rules for Description

	// no validation rules for Enabled

	// no validation rules for GlobalEnabled

	if len(errors) > 0 {
		return GitProjectItemMultiError(errors)
	}

	return nil
}

// GitProjectItemMultiError is an error wrapping multiple validation errors
// returned by GitProjectItem.ValidateAll() if the designated constraints
// aren't met.
type GitProjectItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectItemMultiError) AllErrors() []error { return m }

// GitProjectItemValidationError is the validation error returned by
// GitProjectItem.Validate if the designated constraints aren't met.
type GitProjectItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectItemValidationError) ErrorName() string { return "GitProjectItemValidationError" }

// Error satisfies the builtin error interface
func (e GitProjectItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectItemValidationError{}

// Validate checks the field values on GitAllProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitAllProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitAllProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitAllProjectsResponseMultiError, or nil if none found.
func (m *GitAllProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitAllProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GitAllProjectsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GitAllProjectsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GitAllProjectsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GitAllProjectsResponseMultiError(errors)
	}

	return nil
}

// GitAllProjectsResponseMultiError is an error wrapping multiple validation
// errors returned by GitAllProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type GitAllProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitAllProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitAllProjectsResponseMultiError) AllErrors() []error { return m }

// GitAllProjectsResponseValidationError is the validation error returned by
// GitAllProjectsResponse.Validate if the designated constraints aren't met.
type GitAllProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitAllProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitAllProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitAllProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitAllProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitAllProjectsResponseValidationError) ErrorName() string {
	return "GitAllProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitAllProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitAllProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitAllProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitAllProjectsResponseValidationError{}

// Validate checks the field values on GitOption with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitOption with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GitOptionMultiError, or nil
// if none found.
func (m *GitOption) ValidateAll() error {
	return m.validate(true)
}

func (m *GitOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Type

	// no validation rules for IsLeaf

	// no validation rules for GitProjectId

	// no validation rules for Branch

	if len(errors) > 0 {
		return GitOptionMultiError(errors)
	}

	return nil
}

// GitOptionMultiError is an error wrapping multiple validation errors returned
// by GitOption.ValidateAll() if the designated constraints aren't met.
type GitOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitOptionMultiError) AllErrors() []error { return m }

// GitOptionValidationError is the validation error returned by
// GitOption.Validate if the designated constraints aren't met.
type GitOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitOptionValidationError) ErrorName() string { return "GitOptionValidationError" }

// Error satisfies the builtin error interface
func (e GitOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitOptionValidationError{}

// Validate checks the field values on GitProjectOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitProjectOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitProjectOptionsResponseMultiError, or nil if none found.
func (m *GitProjectOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GitProjectOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GitProjectOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GitProjectOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GitProjectOptionsResponseMultiError(errors)
	}

	return nil
}

// GitProjectOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by GitProjectOptionsResponse.ValidateAll() if the
// designated constraints aren't met.
type GitProjectOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectOptionsResponseMultiError) AllErrors() []error { return m }

// GitProjectOptionsResponseValidationError is the validation error returned by
// GitProjectOptionsResponse.Validate if the designated constraints aren't met.
type GitProjectOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectOptionsResponseValidationError) ErrorName() string {
	return "GitProjectOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectOptionsResponseValidationError{}

// Validate checks the field values on GitBranchOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitBranchOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitBranchOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitBranchOptionsRequestMultiError, or nil if none found.
func (m *GitBranchOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitBranchOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := GitBranchOptionsRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if len(errors) > 0 {
		return GitBranchOptionsRequestMultiError(errors)
	}

	return nil
}

// GitBranchOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by GitBranchOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GitBranchOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitBranchOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitBranchOptionsRequestMultiError) AllErrors() []error { return m }

// GitBranchOptionsRequestValidationError is the validation error returned by
// GitBranchOptionsRequest.Validate if the designated constraints aren't met.
type GitBranchOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitBranchOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitBranchOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitBranchOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitBranchOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitBranchOptionsRequestValidationError) ErrorName() string {
	return "GitBranchOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitBranchOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitBranchOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitBranchOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitBranchOptionsRequestValidationError{}

// Validate checks the field values on GitBranchOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitBranchOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitBranchOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitBranchOptionsResponseMultiError, or nil if none found.
func (m *GitBranchOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitBranchOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GitBranchOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GitBranchOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GitBranchOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GitBranchOptionsResponseMultiError(errors)
	}

	return nil
}

// GitBranchOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by GitBranchOptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GitBranchOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitBranchOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitBranchOptionsResponseMultiError) AllErrors() []error { return m }

// GitBranchOptionsResponseValidationError is the validation error returned by
// GitBranchOptionsResponse.Validate if the designated constraints aren't met.
type GitBranchOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitBranchOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitBranchOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitBranchOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitBranchOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitBranchOptionsResponseValidationError) ErrorName() string {
	return "GitBranchOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitBranchOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitBranchOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitBranchOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitBranchOptionsResponseValidationError{}

// Validate checks the field values on GitCommitOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitCommitOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitCommitOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitCommitOptionsRequestMultiError, or nil if none found.
func (m *GitCommitOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitCommitOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GitProjectId

	// no validation rules for Branch

	if len(errors) > 0 {
		return GitCommitOptionsRequestMultiError(errors)
	}

	return nil
}

// GitCommitOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by GitCommitOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GitCommitOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitCommitOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitCommitOptionsRequestMultiError) AllErrors() []error { return m }

// GitCommitOptionsRequestValidationError is the validation error returned by
// GitCommitOptionsRequest.Validate if the designated constraints aren't met.
type GitCommitOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitCommitOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitCommitOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitCommitOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitCommitOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitCommitOptionsRequestValidationError) ErrorName() string {
	return "GitCommitOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitCommitOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitCommitOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitCommitOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitCommitOptionsRequestValidationError{}

// Validate checks the field values on GitCommitOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitCommitOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitCommitOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitCommitOptionsResponseMultiError, or nil if none found.
func (m *GitCommitOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitCommitOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GitCommitOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GitCommitOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GitCommitOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GitCommitOptionsResponseMultiError(errors)
	}

	return nil
}

// GitCommitOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by GitCommitOptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GitCommitOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitCommitOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitCommitOptionsResponseMultiError) AllErrors() []error { return m }

// GitCommitOptionsResponseValidationError is the validation error returned by
// GitCommitOptionsResponse.Validate if the designated constraints aren't met.
type GitCommitOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitCommitOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitCommitOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitCommitOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitCommitOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitCommitOptionsResponseValidationError) ErrorName() string {
	return "GitCommitOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitCommitOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitCommitOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitCommitOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitCommitOptionsResponseValidationError{}

// Validate checks the field values on GitCommitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GitCommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitCommitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitCommitRequestMultiError, or nil if none found.
func (m *GitCommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitCommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := GitCommitRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := GitCommitRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCommit()) < 1 {
		err := GitCommitRequestValidationError{
			field:  "Commit",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GitCommitRequestMultiError(errors)
	}

	return nil
}

// GitCommitRequestMultiError is an error wrapping multiple validation errors
// returned by GitCommitRequest.ValidateAll() if the designated constraints
// aren't met.
type GitCommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitCommitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitCommitRequestMultiError) AllErrors() []error { return m }

// GitCommitRequestValidationError is the validation error returned by
// GitCommitRequest.Validate if the designated constraints aren't met.
type GitCommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitCommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitCommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitCommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitCommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitCommitRequestValidationError) ErrorName() string { return "GitCommitRequestValidationError" }

// Error satisfies the builtin error interface
func (e GitCommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitCommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitCommitRequestValidationError{}

// Validate checks the field values on GitCommitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GitCommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitCommitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitCommitResponseMultiError, or nil if none found.
func (m *GitCommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitCommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShortId

	// no validation rules for GitProjectId

	// no validation rules for Label

	// no validation rules for Title

	// no validation rules for Branch

	// no validation rules for AuthorName

	// no validation rules for AuthorEmail

	// no validation rules for CommitterName

	// no validation rules for CommitterEmail

	// no validation rules for WebUrl

	// no validation rules for Message

	// no validation rules for CommittedDate

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GitCommitResponseMultiError(errors)
	}

	return nil
}

// GitCommitResponseMultiError is an error wrapping multiple validation errors
// returned by GitCommitResponse.ValidateAll() if the designated constraints
// aren't met.
type GitCommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitCommitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitCommitResponseMultiError) AllErrors() []error { return m }

// GitCommitResponseValidationError is the validation error returned by
// GitCommitResponse.Validate if the designated constraints aren't met.
type GitCommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitCommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitCommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitCommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitCommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitCommitResponseValidationError) ErrorName() string {
	return "GitCommitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitCommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitCommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitCommitResponseValidationError{}

// Validate checks the field values on GitPipelineInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitPipelineInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitPipelineInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitPipelineInfoRequestMultiError, or nil if none found.
func (m *GitPipelineInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitPipelineInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := GitPipelineInfoRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := GitPipelineInfoRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCommit()) < 1 {
		err := GitPipelineInfoRequestValidationError{
			field:  "Commit",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GitPipelineInfoRequestMultiError(errors)
	}

	return nil
}

// GitPipelineInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GitPipelineInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GitPipelineInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitPipelineInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitPipelineInfoRequestMultiError) AllErrors() []error { return m }

// GitPipelineInfoRequestValidationError is the validation error returned by
// GitPipelineInfoRequest.Validate if the designated constraints aren't met.
type GitPipelineInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitPipelineInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitPipelineInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitPipelineInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitPipelineInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitPipelineInfoRequestValidationError) ErrorName() string {
	return "GitPipelineInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitPipelineInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitPipelineInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitPipelineInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitPipelineInfoRequestValidationError{}

// Validate checks the field values on GitPipelineInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitPipelineInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitPipelineInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitPipelineInfoResponseMultiError, or nil if none found.
func (m *GitPipelineInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitPipelineInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for WebUrl

	if len(errors) > 0 {
		return GitPipelineInfoResponseMultiError(errors)
	}

	return nil
}

// GitPipelineInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GitPipelineInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GitPipelineInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitPipelineInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitPipelineInfoResponseMultiError) AllErrors() []error { return m }

// GitPipelineInfoResponseValidationError is the validation error returned by
// GitPipelineInfoResponse.Validate if the designated constraints aren't met.
type GitPipelineInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitPipelineInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitPipelineInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitPipelineInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitPipelineInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitPipelineInfoResponseValidationError) ErrorName() string {
	return "GitPipelineInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitPipelineInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitPipelineInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitPipelineInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitPipelineInfoResponseValidationError{}

// Validate checks the field values on GitConfigFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitConfigFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitConfigFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitConfigFileRequestMultiError, or nil if none found.
func (m *GitConfigFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitConfigFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := GitConfigFileRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := GitConfigFileRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GitConfigFileRequestMultiError(errors)
	}

	return nil
}

// GitConfigFileRequestMultiError is an error wrapping multiple validation
// errors returned by GitConfigFileRequest.ValidateAll() if the designated
// constraints aren't met.
type GitConfigFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitConfigFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitConfigFileRequestMultiError) AllErrors() []error { return m }

// GitConfigFileRequestValidationError is the validation error returned by
// GitConfigFileRequest.Validate if the designated constraints aren't met.
type GitConfigFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitConfigFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitConfigFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitConfigFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitConfigFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitConfigFileRequestValidationError) ErrorName() string {
	return "GitConfigFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitConfigFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitConfigFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitConfigFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitConfigFileRequestValidationError{}

// Validate checks the field values on GitConfigFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitConfigFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitConfigFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitConfigFileResponseMultiError, or nil if none found.
func (m *GitConfigFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitConfigFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Type

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GitConfigFileResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GitConfigFileResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GitConfigFileResponseValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GitConfigFileResponseMultiError(errors)
	}

	return nil
}

// GitConfigFileResponseMultiError is an error wrapping multiple validation
// errors returned by GitConfigFileResponse.ValidateAll() if the designated
// constraints aren't met.
type GitConfigFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitConfigFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitConfigFileResponseMultiError) AllErrors() []error { return m }

// GitConfigFileResponseValidationError is the validation error returned by
// GitConfigFileResponse.Validate if the designated constraints aren't met.
type GitConfigFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitConfigFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitConfigFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitConfigFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitConfigFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitConfigFileResponseValidationError) ErrorName() string {
	return "GitConfigFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitConfigFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitConfigFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitConfigFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitConfigFileResponseValidationError{}

// Validate checks the field values on GitEnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitEnableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitEnableProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitEnableProjectResponseMultiError, or nil if none found.
func (m *GitEnableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitEnableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GitEnableProjectResponseMultiError(errors)
	}

	return nil
}

// GitEnableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by GitEnableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type GitEnableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitEnableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitEnableProjectResponseMultiError) AllErrors() []error { return m }

// GitEnableProjectResponseValidationError is the validation error returned by
// GitEnableProjectResponse.Validate if the designated constraints aren't met.
type GitEnableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitEnableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitEnableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitEnableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitEnableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitEnableProjectResponseValidationError) ErrorName() string {
	return "GitEnableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitEnableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitEnableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitEnableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitEnableProjectResponseValidationError{}

// Validate checks the field values on GitDisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitDisableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitDisableProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitDisableProjectResponseMultiError, or nil if none found.
func (m *GitDisableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitDisableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GitDisableProjectResponseMultiError(errors)
	}

	return nil
}

// GitDisableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by GitDisableProjectResponse.ValidateAll() if the
// designated constraints aren't met.
type GitDisableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitDisableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitDisableProjectResponseMultiError) AllErrors() []error { return m }

// GitDisableProjectResponseValidationError is the validation error returned by
// GitDisableProjectResponse.Validate if the designated constraints aren't met.
type GitDisableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitDisableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitDisableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitDisableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitDisableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitDisableProjectResponseValidationError) ErrorName() string {
	return "GitDisableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitDisableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitDisableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitDisableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitDisableProjectResponseValidationError{}

// Validate checks the field values on GitAllProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitAllProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitAllProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitAllProjectsRequestMultiError, or nil if none found.
func (m *GitAllProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitAllProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GitAllProjectsRequestMultiError(errors)
	}

	return nil
}

// GitAllProjectsRequestMultiError is an error wrapping multiple validation
// errors returned by GitAllProjectsRequest.ValidateAll() if the designated
// constraints aren't met.
type GitAllProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitAllProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitAllProjectsRequestMultiError) AllErrors() []error { return m }

// GitAllProjectsRequestValidationError is the validation error returned by
// GitAllProjectsRequest.Validate if the designated constraints aren't met.
type GitAllProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitAllProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitAllProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitAllProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitAllProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitAllProjectsRequestValidationError) ErrorName() string {
	return "GitAllProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitAllProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitAllProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitAllProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitAllProjectsRequestValidationError{}

// Validate checks the field values on GitProjectOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitProjectOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitProjectOptionsRequestMultiError, or nil if none found.
func (m *GitProjectOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GitProjectOptionsRequestMultiError(errors)
	}

	return nil
}

// GitProjectOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by GitProjectOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GitProjectOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectOptionsRequestMultiError) AllErrors() []error { return m }

// GitProjectOptionsRequestValidationError is the validation error returned by
// GitProjectOptionsRequest.Validate if the designated constraints aren't met.
type GitProjectOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectOptionsRequestValidationError) ErrorName() string {
	return "GitProjectOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectOptionsRequestValidationError{}

// Validate checks the field values on GitProjectConfigShowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectConfigShowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitProjectConfigShowRequestMultiError, or nil if none found.
func (m *GitProjectConfigShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := GitProjectConfigShowRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return GitProjectConfigShowRequestMultiError(errors)
	}

	return nil
}

// GitProjectConfigShowRequestMultiError is an error wrapping multiple
// validation errors returned by GitProjectConfigShowRequest.ValidateAll() if
// the designated constraints aren't met.
type GitProjectConfigShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigShowRequestMultiError) AllErrors() []error { return m }

// GitProjectConfigShowRequestValidationError is the validation error returned
// by GitProjectConfigShowRequest.Validate if the designated constraints
// aren't met.
type GitProjectConfigShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigShowRequestValidationError) ErrorName() string {
	return "GitProjectConfigShowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigShowRequestValidationError{}

// Validate checks the field values on GitProjectConfigShowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectConfigShowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitProjectConfigShowResponseMultiError, or nil if none found.
func (m *GitProjectConfigShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Branch

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitProjectConfigShowResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitProjectConfigShowResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitProjectConfigShowResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GitProjectConfigShowResponseMultiError(errors)
	}

	return nil
}

// GitProjectConfigShowResponseMultiError is an error wrapping multiple
// validation errors returned by GitProjectConfigShowResponse.ValidateAll() if
// the designated constraints aren't met.
type GitProjectConfigShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigShowResponseMultiError) AllErrors() []error { return m }

// GitProjectConfigShowResponseValidationError is the validation error returned
// by GitProjectConfigShowResponse.Validate if the designated constraints
// aren't met.
type GitProjectConfigShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigShowResponseValidationError) ErrorName() string {
	return "GitProjectConfigShowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigShowResponseValidationError{}

// Validate checks the field values on GitProjectConfigGlobalConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GitProjectConfigGlobalConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectConfigGlobalConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GitProjectConfigGlobalConfigRequestMultiError, or nil if none found.
func (m *GitProjectConfigGlobalConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigGlobalConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := GitProjectConfigGlobalConfigRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GitProjectConfigGlobalConfigRequestMultiError(errors)
	}

	return nil
}

// GitProjectConfigGlobalConfigRequestMultiError is an error wrapping multiple
// validation errors returned by
// GitProjectConfigGlobalConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GitProjectConfigGlobalConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigGlobalConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigGlobalConfigRequestMultiError) AllErrors() []error { return m }

// GitProjectConfigGlobalConfigRequestValidationError is the validation error
// returned by GitProjectConfigGlobalConfigRequest.Validate if the designated
// constraints aren't met.
type GitProjectConfigGlobalConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigGlobalConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigGlobalConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigGlobalConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigGlobalConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigGlobalConfigRequestValidationError) ErrorName() string {
	return "GitProjectConfigGlobalConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigGlobalConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigGlobalConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigGlobalConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigGlobalConfigRequestValidationError{}

// Validate checks the field values on GitProjectConfigGlobalConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GitProjectConfigGlobalConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectConfigGlobalConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GitProjectConfigGlobalConfigResponseMultiError, or nil if none found.
func (m *GitProjectConfigGlobalConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigGlobalConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitProjectConfigGlobalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitProjectConfigGlobalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitProjectConfigGlobalConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GitProjectConfigGlobalConfigResponseMultiError(errors)
	}

	return nil
}

// GitProjectConfigGlobalConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// GitProjectConfigGlobalConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GitProjectConfigGlobalConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigGlobalConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigGlobalConfigResponseMultiError) AllErrors() []error { return m }

// GitProjectConfigGlobalConfigResponseValidationError is the validation error
// returned by GitProjectConfigGlobalConfigResponse.Validate if the designated
// constraints aren't met.
type GitProjectConfigGlobalConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigGlobalConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigGlobalConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigGlobalConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigGlobalConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigGlobalConfigResponseValidationError) ErrorName() string {
	return "GitProjectConfigGlobalConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigGlobalConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigGlobalConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigGlobalConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigGlobalConfigResponseValidationError{}

// Validate checks the field values on GitProjectConfigUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectConfigUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GitProjectConfigUpdateRequestMultiError, or nil if none found.
func (m *GitProjectConfigUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := GitProjectConfigUpdateRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitProjectConfigUpdateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitProjectConfigUpdateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitProjectConfigUpdateRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GitProjectConfigUpdateRequestMultiError(errors)
	}

	return nil
}

// GitProjectConfigUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by GitProjectConfigUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type GitProjectConfigUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigUpdateRequestMultiError) AllErrors() []error { return m }

// GitProjectConfigUpdateRequestValidationError is the validation error
// returned by GitProjectConfigUpdateRequest.Validate if the designated
// constraints aren't met.
type GitProjectConfigUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigUpdateRequestValidationError) ErrorName() string {
	return "GitProjectConfigUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigUpdateRequestValidationError{}

// Validate checks the field values on GitProjectConfigUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectConfigUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GitProjectConfigUpdateResponseMultiError, or nil if none found.
func (m *GitProjectConfigUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitProjectConfigUpdateResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitProjectConfigUpdateResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitProjectConfigUpdateResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GitProjectConfigUpdateResponseMultiError(errors)
	}

	return nil
}

// GitProjectConfigUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by GitProjectConfigUpdateResponse.ValidateAll()
// if the designated constraints aren't met.
type GitProjectConfigUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigUpdateResponseMultiError) AllErrors() []error { return m }

// GitProjectConfigUpdateResponseValidationError is the validation error
// returned by GitProjectConfigUpdateResponse.Validate if the designated
// constraints aren't met.
type GitProjectConfigUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigUpdateResponseValidationError) ErrorName() string {
	return "GitProjectConfigUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigUpdateResponseValidationError{}

// Validate checks the field values on
// GitProjectConfigToggleGlobalStatusRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigToggleGlobalStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GitProjectConfigToggleGlobalStatusRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GitProjectConfigToggleGlobalStatusRequestMultiError, or nil if none found.
func (m *GitProjectConfigToggleGlobalStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigToggleGlobalStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := GitProjectConfigToggleGlobalStatusRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return GitProjectConfigToggleGlobalStatusRequestMultiError(errors)
	}

	return nil
}

// GitProjectConfigToggleGlobalStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// GitProjectConfigToggleGlobalStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GitProjectConfigToggleGlobalStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigToggleGlobalStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigToggleGlobalStatusRequestMultiError) AllErrors() []error { return m }

// GitProjectConfigToggleGlobalStatusRequestValidationError is the validation
// error returned by GitProjectConfigToggleGlobalStatusRequest.Validate if the
// designated constraints aren't met.
type GitProjectConfigToggleGlobalStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigToggleGlobalStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigToggleGlobalStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigToggleGlobalStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigToggleGlobalStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigToggleGlobalStatusRequestValidationError) ErrorName() string {
	return "GitProjectConfigToggleGlobalStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigToggleGlobalStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigToggleGlobalStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigToggleGlobalStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigToggleGlobalStatusRequestValidationError{}

// Validate checks the field values on
// GitProjectConfigDefaultChartValuesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigDefaultChartValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GitProjectConfigDefaultChartValuesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GitProjectConfigDefaultChartValuesRequestMultiError, or nil if none found.
func (m *GitProjectConfigDefaultChartValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigDefaultChartValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGitProjectId() <= 0 {
		err := GitProjectConfigDefaultChartValuesRequestValidationError{
			field:  "GitProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Branch

	if len(errors) > 0 {
		return GitProjectConfigDefaultChartValuesRequestMultiError(errors)
	}

	return nil
}

// GitProjectConfigDefaultChartValuesRequestMultiError is an error wrapping
// multiple validation errors returned by
// GitProjectConfigDefaultChartValuesRequest.ValidateAll() if the designated
// constraints aren't met.
type GitProjectConfigDefaultChartValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigDefaultChartValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigDefaultChartValuesRequestMultiError) AllErrors() []error { return m }

// GitProjectConfigDefaultChartValuesRequestValidationError is the validation
// error returned by GitProjectConfigDefaultChartValuesRequest.Validate if the
// designated constraints aren't met.
type GitProjectConfigDefaultChartValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigDefaultChartValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigDefaultChartValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigDefaultChartValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigDefaultChartValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigDefaultChartValuesRequestValidationError) ErrorName() string {
	return "GitProjectConfigDefaultChartValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigDefaultChartValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigDefaultChartValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigDefaultChartValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigDefaultChartValuesRequestValidationError{}

// Validate checks the field values on
// GitProjectConfigDefaultChartValuesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigDefaultChartValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GitProjectConfigDefaultChartValuesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GitProjectConfigDefaultChartValuesResponseMultiError, or nil if none found.
func (m *GitProjectConfigDefaultChartValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigDefaultChartValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GitProjectConfigDefaultChartValuesResponseMultiError(errors)
	}

	return nil
}

// GitProjectConfigDefaultChartValuesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GitProjectConfigDefaultChartValuesResponse.ValidateAll() if the designated
// constraints aren't met.
type GitProjectConfigDefaultChartValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigDefaultChartValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigDefaultChartValuesResponseMultiError) AllErrors() []error { return m }

// GitProjectConfigDefaultChartValuesResponseValidationError is the validation
// error returned by GitProjectConfigDefaultChartValuesResponse.Validate if
// the designated constraints aren't met.
type GitProjectConfigDefaultChartValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigDefaultChartValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigDefaultChartValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigDefaultChartValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigDefaultChartValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigDefaultChartValuesResponseValidationError) ErrorName() string {
	return "GitProjectConfigDefaultChartValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigDefaultChartValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigDefaultChartValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigDefaultChartValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigDefaultChartValuesResponseValidationError{}

// Validate checks the field values on
// GitProjectConfigToggleGlobalStatusResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitProjectConfigToggleGlobalStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GitProjectConfigToggleGlobalStatusResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GitProjectConfigToggleGlobalStatusResponseMultiError, or nil if none found.
func (m *GitProjectConfigToggleGlobalStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectConfigToggleGlobalStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GitProjectConfigToggleGlobalStatusResponseMultiError(errors)
	}

	return nil
}

// GitProjectConfigToggleGlobalStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// GitProjectConfigToggleGlobalStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GitProjectConfigToggleGlobalStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectConfigToggleGlobalStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectConfigToggleGlobalStatusResponseMultiError) AllErrors() []error { return m }

// GitProjectConfigToggleGlobalStatusResponseValidationError is the validation
// error returned by GitProjectConfigToggleGlobalStatusResponse.Validate if
// the designated constraints aren't met.
type GitProjectConfigToggleGlobalStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectConfigToggleGlobalStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectConfigToggleGlobalStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectConfigToggleGlobalStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectConfigToggleGlobalStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectConfigToggleGlobalStatusResponseValidationError) ErrorName() string {
	return "GitProjectConfigToggleGlobalStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GitProjectConfigToggleGlobalStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectConfigToggleGlobalStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectConfigToggleGlobalStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectConfigToggleGlobalStatusResponseValidationError{}
