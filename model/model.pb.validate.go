// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model/model.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GitlabProjectModel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitlabProjectModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitlabProjectModel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitlabProjectModelMultiError, or nil if none found.
func (m *GitlabProjectModel) ValidateAll() error {
	return m.validate(true)
}

func (m *GitlabProjectModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DefaultBranch

	// no validation rules for Name

	// no validation rules for GitlabProjectId

	// no validation rules for Enabled

	// no validation rules for GlobalEnabled

	// no validation rules for GlobalConfig

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GitlabProjectModelMultiError(errors)
	}
	return nil
}

// GitlabProjectModelMultiError is an error wrapping multiple validation errors
// returned by GitlabProjectModel.ValidateAll() if the designated constraints
// aren't met.
type GitlabProjectModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitlabProjectModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitlabProjectModelMultiError) AllErrors() []error { return m }

// GitlabProjectModelValidationError is the validation error returned by
// GitlabProjectModel.Validate if the designated constraints aren't met.
type GitlabProjectModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitlabProjectModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitlabProjectModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitlabProjectModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitlabProjectModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitlabProjectModelValidationError) ErrorName() string {
	return "GitlabProjectModelValidationError"
}

// Error satisfies the builtin error interface
func (e GitlabProjectModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitlabProjectModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitlabProjectModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitlabProjectModelValidationError{}

// Validate checks the field values on NamespaceModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamespaceModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceModelMultiError,
// or nil if none found.
func (m *NamespaceModel) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespaceModelValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespaceModelValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceModelValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NamespaceModelMultiError(errors)
	}
	return nil
}

// NamespaceModelMultiError is an error wrapping multiple validation errors
// returned by NamespaceModel.ValidateAll() if the designated constraints
// aren't met.
type NamespaceModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceModelMultiError) AllErrors() []error { return m }

// NamespaceModelValidationError is the validation error returned by
// NamespaceModel.Validate if the designated constraints aren't met.
type NamespaceModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceModelValidationError) ErrorName() string { return "NamespaceModelValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceModelValidationError{}

// Validate checks the field values on ProjectModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectModelMultiError, or
// nil if none found.
func (m *ProjectModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GitlabProjectId

	// no validation rules for GitlabBranch

	// no validation rules for GitlabCommit

	// no validation rules for Config

	// no validation rules for OverrideValues

	// no validation rules for DockerImage

	// no validation rules for PodSelectors

	// no validation rules for NamespaceId

	// no validation rules for Atomic

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for ExtraValues

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectModelValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectModelValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectModelValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectModelMultiError(errors)
	}
	return nil
}

// ProjectModelMultiError is an error wrapping multiple validation errors
// returned by ProjectModel.ValidateAll() if the designated constraints aren't met.
type ProjectModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectModelMultiError) AllErrors() []error { return m }

// ProjectModelValidationError is the validation error returned by
// ProjectModel.Validate if the designated constraints aren't met.
type ProjectModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectModelValidationError) ErrorName() string { return "ProjectModelValidationError" }

// Error satisfies the builtin error interface
func (e ProjectModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectModelValidationError{}

// Validate checks the field values on FileModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileModelMultiError, or nil
// if none found.
func (m *FileModel) ValidateAll() error {
	return m.validate(true)
}

func (m *FileModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Path

	// no validation rules for Size

	// no validation rules for Username

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	// no validation rules for ContainerPath

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return FileModelMultiError(errors)
	}
	return nil
}

// FileModelMultiError is an error wrapping multiple validation errors returned
// by FileModel.ValidateAll() if the designated constraints aren't met.
type FileModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileModelMultiError) AllErrors() []error { return m }

// FileModelValidationError is the validation error returned by
// FileModel.Validate if the designated constraints aren't met.
type FileModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileModelValidationError) ErrorName() string { return "FileModelValidationError" }

// Error satisfies the builtin error interface
func (e FileModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileModelValidationError{}
