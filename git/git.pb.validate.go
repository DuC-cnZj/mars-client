// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: git/git.proto

package git

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProjectRequestMultiError, or nil if none found.
func (m *EnableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := EnableProjectRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableProjectRequestMultiError(errors)
	}

	return nil
}

// EnableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by EnableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProjectRequestMultiError) AllErrors() []error { return m }

// EnableProjectRequestValidationError is the validation error returned by
// EnableProjectRequest.Validate if the designated constraints aren't met.
type EnableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProjectRequestValidationError) ErrorName() string {
	return "EnableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProjectRequestValidationError{}

// Validate checks the field values on DisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProjectRequestMultiError, or nil if none found.
func (m *DisableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := DisableProjectRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableProjectRequestMultiError(errors)
	}

	return nil
}

// DisableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DisableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProjectRequestMultiError) AllErrors() []error { return m }

// DisableProjectRequestValidationError is the validation error returned by
// DisableProjectRequest.Validate if the designated constraints aren't met.
type DisableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProjectRequestValidationError) ErrorName() string {
	return "DisableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProjectRequestValidationError{}

// Validate checks the field values on ProjectItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectItemMultiError, or
// nil if none found.
func (m *ProjectItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for WebUrl

	// no validation rules for AvatarUrl

	// no validation rules for Description

	// no validation rules for Enabled

	// no validation rules for GlobalEnabled

	if len(errors) > 0 {
		return ProjectItemMultiError(errors)
	}

	return nil
}

// ProjectItemMultiError is an error wrapping multiple validation errors
// returned by ProjectItem.ValidateAll() if the designated constraints aren't met.
type ProjectItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectItemMultiError) AllErrors() []error { return m }

// ProjectItemValidationError is the validation error returned by
// ProjectItem.Validate if the designated constraints aren't met.
type ProjectItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectItemValidationError) ErrorName() string { return "ProjectItemValidationError" }

// Error satisfies the builtin error interface
func (e ProjectItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectItemValidationError{}

// Validate checks the field values on AllProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllProjectsResponseMultiError, or nil if none found.
func (m *AllProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllProjectsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllProjectsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllProjectsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllProjectsResponseMultiError(errors)
	}

	return nil
}

// AllProjectsResponseMultiError is an error wrapping multiple validation
// errors returned by AllProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type AllProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllProjectsResponseMultiError) AllErrors() []error { return m }

// AllProjectsResponseValidationError is the validation error returned by
// AllProjectsResponse.Validate if the designated constraints aren't met.
type AllProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllProjectsResponseValidationError) ErrorName() string {
	return "AllProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AllProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllProjectsResponseValidationError{}

// Validate checks the field values on Option with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Option) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Option with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OptionMultiError, or nil if none found.
func (m *Option) ValidateAll() error {
	return m.validate(true)
}

func (m *Option) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Type

	// no validation rules for IsLeaf

	// no validation rules for GitProjectId

	// no validation rules for Branch

	if len(errors) > 0 {
		return OptionMultiError(errors)
	}

	return nil
}

// OptionMultiError is an error wrapping multiple validation errors returned by
// Option.ValidateAll() if the designated constraints aren't met.
type OptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionMultiError) AllErrors() []error { return m }

// OptionValidationError is the validation error returned by Option.Validate if
// the designated constraints aren't met.
type OptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionValidationError) ErrorName() string { return "OptionValidationError" }

// Error satisfies the builtin error interface
func (e OptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionValidationError{}

// Validate checks the field values on ProjectOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectOptionsResponseMultiError, or nil if none found.
func (m *ProjectOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectOptionsResponseMultiError(errors)
	}

	return nil
}

// ProjectOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectOptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectOptionsResponseMultiError) AllErrors() []error { return m }

// ProjectOptionsResponseValidationError is the validation error returned by
// ProjectOptionsResponse.Validate if the designated constraints aren't met.
type ProjectOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectOptionsResponseValidationError) ErrorName() string {
	return "ProjectOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectOptionsResponseValidationError{}

// Validate checks the field values on BranchOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BranchOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BranchOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BranchOptionsRequestMultiError, or nil if none found.
func (m *BranchOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BranchOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := BranchOptionsRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if len(errors) > 0 {
		return BranchOptionsRequestMultiError(errors)
	}

	return nil
}

// BranchOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by BranchOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type BranchOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BranchOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BranchOptionsRequestMultiError) AllErrors() []error { return m }

// BranchOptionsRequestValidationError is the validation error returned by
// BranchOptionsRequest.Validate if the designated constraints aren't met.
type BranchOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BranchOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BranchOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BranchOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BranchOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BranchOptionsRequestValidationError) ErrorName() string {
	return "BranchOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BranchOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBranchOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BranchOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BranchOptionsRequestValidationError{}

// Validate checks the field values on BranchOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BranchOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BranchOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BranchOptionsResponseMultiError, or nil if none found.
func (m *BranchOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BranchOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BranchOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BranchOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BranchOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BranchOptionsResponseMultiError(errors)
	}

	return nil
}

// BranchOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by BranchOptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type BranchOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BranchOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BranchOptionsResponseMultiError) AllErrors() []error { return m }

// BranchOptionsResponseValidationError is the validation error returned by
// BranchOptionsResponse.Validate if the designated constraints aren't met.
type BranchOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BranchOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BranchOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BranchOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BranchOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BranchOptionsResponseValidationError) ErrorName() string {
	return "BranchOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BranchOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBranchOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BranchOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BranchOptionsResponseValidationError{}

// Validate checks the field values on CommitOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitOptionsRequestMultiError, or nil if none found.
func (m *CommitOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GitProjectId

	// no validation rules for Branch

	if len(errors) > 0 {
		return CommitOptionsRequestMultiError(errors)
	}

	return nil
}

// CommitOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by CommitOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type CommitOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitOptionsRequestMultiError) AllErrors() []error { return m }

// CommitOptionsRequestValidationError is the validation error returned by
// CommitOptionsRequest.Validate if the designated constraints aren't met.
type CommitOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitOptionsRequestValidationError) ErrorName() string {
	return "CommitOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommitOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitOptionsRequestValidationError{}

// Validate checks the field values on CommitOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitOptionsResponseMultiError, or nil if none found.
func (m *CommitOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommitOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommitOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommitOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommitOptionsResponseMultiError(errors)
	}

	return nil
}

// CommitOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by CommitOptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type CommitOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitOptionsResponseMultiError) AllErrors() []error { return m }

// CommitOptionsResponseValidationError is the validation error returned by
// CommitOptionsResponse.Validate if the designated constraints aren't met.
type CommitOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitOptionsResponseValidationError) ErrorName() string {
	return "CommitOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommitOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitOptionsResponseValidationError{}

// Validate checks the field values on CommitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommitRequestMultiError, or
// nil if none found.
func (m *CommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := CommitRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := CommitRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCommit()) < 1 {
		err := CommitRequestValidationError{
			field:  "Commit",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommitRequestMultiError(errors)
	}

	return nil
}

// CommitRequestMultiError is an error wrapping multiple validation errors
// returned by CommitRequest.ValidateAll() if the designated constraints
// aren't met.
type CommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitRequestMultiError) AllErrors() []error { return m }

// CommitRequestValidationError is the validation error returned by
// CommitRequest.Validate if the designated constraints aren't met.
type CommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitRequestValidationError) ErrorName() string { return "CommitRequestValidationError" }

// Error satisfies the builtin error interface
func (e CommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitRequestValidationError{}

// Validate checks the field values on CommitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommitResponseMultiError,
// or nil if none found.
func (m *CommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShortId

	// no validation rules for GitProjectId

	// no validation rules for Label

	// no validation rules for Title

	// no validation rules for Branch

	// no validation rules for AuthorName

	// no validation rules for AuthorEmail

	// no validation rules for CommitterName

	// no validation rules for CommitterEmail

	// no validation rules for WebUrl

	// no validation rules for Message

	// no validation rules for CommittedDate

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CommitResponseMultiError(errors)
	}

	return nil
}

// CommitResponseMultiError is an error wrapping multiple validation errors
// returned by CommitResponse.ValidateAll() if the designated constraints
// aren't met.
type CommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitResponseMultiError) AllErrors() []error { return m }

// CommitResponseValidationError is the validation error returned by
// CommitResponse.Validate if the designated constraints aren't met.
type CommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitResponseValidationError) ErrorName() string { return "CommitResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitResponseValidationError{}

// Validate checks the field values on PipelineInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineInfoRequestMultiError, or nil if none found.
func (m *PipelineInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := PipelineInfoRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := PipelineInfoRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCommit()) < 1 {
		err := PipelineInfoRequestValidationError{
			field:  "Commit",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PipelineInfoRequestMultiError(errors)
	}

	return nil
}

// PipelineInfoRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineInfoRequestMultiError) AllErrors() []error { return m }

// PipelineInfoRequestValidationError is the validation error returned by
// PipelineInfoRequest.Validate if the designated constraints aren't met.
type PipelineInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineInfoRequestValidationError) ErrorName() string {
	return "PipelineInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineInfoRequestValidationError{}

// Validate checks the field values on PipelineInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineInfoResponseMultiError, or nil if none found.
func (m *PipelineInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for WebUrl

	if len(errors) > 0 {
		return PipelineInfoResponseMultiError(errors)
	}

	return nil
}

// PipelineInfoResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineInfoResponseMultiError) AllErrors() []error { return m }

// PipelineInfoResponseValidationError is the validation error returned by
// PipelineInfoResponse.Validate if the designated constraints aren't met.
type PipelineInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineInfoResponseValidationError) ErrorName() string {
	return "PipelineInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineInfoResponseValidationError{}

// Validate checks the field values on ConfigFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfigFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigFileRequestMultiError, or nil if none found.
func (m *ConfigFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGitProjectId()) < 1 {
		err := ConfigFileRequestValidationError{
			field:  "GitProjectId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBranch()) < 1 {
		err := ConfigFileRequestValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfigFileRequestMultiError(errors)
	}

	return nil
}

// ConfigFileRequestMultiError is an error wrapping multiple validation errors
// returned by ConfigFileRequest.ValidateAll() if the designated constraints
// aren't met.
type ConfigFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigFileRequestMultiError) AllErrors() []error { return m }

// ConfigFileRequestValidationError is the validation error returned by
// ConfigFileRequest.Validate if the designated constraints aren't met.
type ConfigFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigFileRequestValidationError) ErrorName() string {
	return "ConfigFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigFileRequestValidationError{}

// Validate checks the field values on ConfigFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigFileResponseMultiError, or nil if none found.
func (m *ConfigFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Type

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigFileResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigFileResponseValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigFileResponseValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigFileResponseMultiError(errors)
	}

	return nil
}

// ConfigFileResponseMultiError is an error wrapping multiple validation errors
// returned by ConfigFileResponse.ValidateAll() if the designated constraints
// aren't met.
type ConfigFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigFileResponseMultiError) AllErrors() []error { return m }

// ConfigFileResponseValidationError is the validation error returned by
// ConfigFileResponse.Validate if the designated constraints aren't met.
type ConfigFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigFileResponseValidationError) ErrorName() string {
	return "ConfigFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigFileResponseValidationError{}

// Validate checks the field values on EnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProjectResponseMultiError, or nil if none found.
func (m *EnableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableProjectResponseMultiError(errors)
	}

	return nil
}

// EnableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by EnableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProjectResponseMultiError) AllErrors() []error { return m }

// EnableProjectResponseValidationError is the validation error returned by
// EnableProjectResponse.Validate if the designated constraints aren't met.
type EnableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProjectResponseValidationError) ErrorName() string {
	return "EnableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProjectResponseValidationError{}

// Validate checks the field values on DisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProjectResponseMultiError, or nil if none found.
func (m *DisableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableProjectResponseMultiError(errors)
	}

	return nil
}

// DisableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DisableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProjectResponseMultiError) AllErrors() []error { return m }

// DisableProjectResponseValidationError is the validation error returned by
// DisableProjectResponse.Validate if the designated constraints aren't met.
type DisableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProjectResponseValidationError) ErrorName() string {
	return "DisableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProjectResponseValidationError{}

// Validate checks the field values on AllProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllProjectsRequestMultiError, or nil if none found.
func (m *AllProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllProjectsRequestMultiError(errors)
	}

	return nil
}

// AllProjectsRequestMultiError is an error wrapping multiple validation errors
// returned by AllProjectsRequest.ValidateAll() if the designated constraints
// aren't met.
type AllProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllProjectsRequestMultiError) AllErrors() []error { return m }

// AllProjectsRequestValidationError is the validation error returned by
// AllProjectsRequest.Validate if the designated constraints aren't met.
type AllProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllProjectsRequestValidationError) ErrorName() string {
	return "AllProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllProjectsRequestValidationError{}

// Validate checks the field values on ProjectOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectOptionsRequestMultiError, or nil if none found.
func (m *ProjectOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectOptionsRequestMultiError(errors)
	}

	return nil
}

// ProjectOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectOptionsRequestMultiError) AllErrors() []error { return m }

// ProjectOptionsRequestValidationError is the validation error returned by
// ProjectOptionsRequest.Validate if the designated constraints aren't met.
type ProjectOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectOptionsRequestValidationError) ErrorName() string {
	return "ProjectOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectOptionsRequestValidationError{}
