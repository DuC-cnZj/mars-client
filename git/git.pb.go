// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: git/git.proto

package git

import (
	reflect "reflect"
	sync "sync"

	mars "github.com/duc-cnzj/mars-client/v4/mars"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitEnableProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
}

func (x *GitEnableProjectRequest) Reset() {
	*x = GitEnableProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitEnableProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitEnableProjectRequest) ProtoMessage() {}

func (x *GitEnableProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitEnableProjectRequest.ProtoReflect.Descriptor instead.
func (*GitEnableProjectRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{0}
}

func (x *GitEnableProjectRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

type GitDisableProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
}

func (x *GitDisableProjectRequest) Reset() {
	*x = GitDisableProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDisableProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDisableProjectRequest) ProtoMessage() {}

func (x *GitDisableProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDisableProjectRequest.ProtoReflect.Descriptor instead.
func (*GitDisableProjectRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{1}
}

func (x *GitDisableProjectRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

type GitProjectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path          string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	WebUrl        string `protobuf:"bytes,4,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	AvatarUrl     string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Enabled       bool   `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GlobalEnabled bool   `protobuf:"varint,8,opt,name=global_enabled,json=globalEnabled,proto3" json:"global_enabled,omitempty"`
}

func (x *GitProjectItem) Reset() {
	*x = GitProjectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProjectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProjectItem) ProtoMessage() {}

func (x *GitProjectItem) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProjectItem.ProtoReflect.Descriptor instead.
func (*GitProjectItem) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{2}
}

func (x *GitProjectItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitProjectItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitProjectItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitProjectItem) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *GitProjectItem) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitProjectItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GitProjectItem) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GitProjectItem) GetGlobalEnabled() bool {
	if x != nil {
		return x.GlobalEnabled
	}
	return false
}

type GitAllProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GitProjectItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GitAllProjectsResponse) Reset() {
	*x = GitAllProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitAllProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitAllProjectsResponse) ProtoMessage() {}

func (x *GitAllProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitAllProjectsResponse.ProtoReflect.Descriptor instead.
func (*GitAllProjectsResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{3}
}

func (x *GitAllProjectsResponse) GetItems() []*GitProjectItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GitOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// isLeaf 兼容 antd
	IsLeaf       bool   `protobuf:"varint,4,opt,name=isLeaf,proto3" json:"isLeaf,omitempty"`
	GitProjectId string `protobuf:"bytes,5,opt,name=gitProjectId,proto3" json:"gitProjectId,omitempty"`
	Branch       string `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitOption) Reset() {
	*x = GitOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitOption) ProtoMessage() {}

func (x *GitOption) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitOption.ProtoReflect.Descriptor instead.
func (*GitOption) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{4}
}

func (x *GitOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GitOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GitOption) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GitOption) GetIsLeaf() bool {
	if x != nil {
		return x.IsLeaf
	}
	return false
}

func (x *GitOption) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitOption) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitProjectOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GitOption `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GitProjectOptionsResponse) Reset() {
	*x = GitProjectOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProjectOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProjectOptionsResponse) ProtoMessage() {}

func (x *GitProjectOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProjectOptionsResponse.ProtoReflect.Descriptor instead.
func (*GitProjectOptionsResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{5}
}

func (x *GitProjectOptionsResponse) GetItems() []*GitOption {
	if x != nil {
		return x.Items
	}
	return nil
}

type GitBranchOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	All          bool   `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *GitBranchOptionsRequest) Reset() {
	*x = GitBranchOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitBranchOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitBranchOptionsRequest) ProtoMessage() {}

func (x *GitBranchOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitBranchOptionsRequest.ProtoReflect.Descriptor instead.
func (*GitBranchOptionsRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{6}
}

func (x *GitBranchOptionsRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitBranchOptionsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GitBranchOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GitOption `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GitBranchOptionsResponse) Reset() {
	*x = GitBranchOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitBranchOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitBranchOptionsResponse) ProtoMessage() {}

func (x *GitBranchOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitBranchOptionsResponse.ProtoReflect.Descriptor instead.
func (*GitBranchOptionsResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{7}
}

func (x *GitBranchOptionsResponse) GetItems() []*GitOption {
	if x != nil {
		return x.Items
	}
	return nil
}

type GitCommitOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitCommitOptionsRequest) Reset() {
	*x = GitCommitOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitOptionsRequest) ProtoMessage() {}

func (x *GitCommitOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitOptionsRequest.ProtoReflect.Descriptor instead.
func (*GitCommitOptionsRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{8}
}

func (x *GitCommitOptionsRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitCommitOptionsRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitCommitOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GitOption `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GitCommitOptionsResponse) Reset() {
	*x = GitCommitOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitOptionsResponse) ProtoMessage() {}

func (x *GitCommitOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitOptionsResponse.ProtoReflect.Descriptor instead.
func (*GitCommitOptionsResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{9}
}

func (x *GitCommitOptionsResponse) GetItems() []*GitOption {
	if x != nil {
		return x.Items
	}
	return nil
}

type GitCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit       string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitCommitRequest) Reset() {
	*x = GitCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitRequest) ProtoMessage() {}

func (x *GitCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitRequest.ProtoReflect.Descriptor instead.
func (*GitCommitRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{10}
}

func (x *GitCommitRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitCommitRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type GitCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortId        string `protobuf:"bytes,2,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	GitProjectId   string `protobuf:"bytes,3,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Label          string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Title          string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Branch         string `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
	AuthorName     string `protobuf:"bytes,7,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorEmail    string `protobuf:"bytes,8,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	CommitterName  string `protobuf:"bytes,9,opt,name=committer_name,json=committerName,proto3" json:"committer_name,omitempty"`
	CommitterEmail string `protobuf:"bytes,10,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
	WebUrl         string `protobuf:"bytes,11,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	Message        string `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	CommittedDate  string `protobuf:"bytes,13,opt,name=committed_date,json=committedDate,proto3" json:"committed_date,omitempty"`
	CreatedAt      string `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GitCommitResponse) Reset() {
	*x = GitCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitResponse) ProtoMessage() {}

func (x *GitCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitResponse.ProtoReflect.Descriptor instead.
func (*GitCommitResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{11}
}

func (x *GitCommitResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GitCommitResponse) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *GitCommitResponse) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitCommitResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GitCommitResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GitCommitResponse) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitCommitResponse) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *GitCommitResponse) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *GitCommitResponse) GetCommitterName() string {
	if x != nil {
		return x.CommitterName
	}
	return ""
}

func (x *GitCommitResponse) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

func (x *GitCommitResponse) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *GitCommitResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GitCommitResponse) GetCommittedDate() string {
	if x != nil {
		return x.CommittedDate
	}
	return ""
}

func (x *GitCommitResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GitPipelineInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit       string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitPipelineInfoRequest) Reset() {
	*x = GitPipelineInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitPipelineInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitPipelineInfoRequest) ProtoMessage() {}

func (x *GitPipelineInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitPipelineInfoRequest.ProtoReflect.Descriptor instead.
func (*GitPipelineInfoRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{12}
}

func (x *GitPipelineInfoRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitPipelineInfoRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitPipelineInfoRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type GitPipelineInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WebUrl string `protobuf:"bytes,2,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *GitPipelineInfoResponse) Reset() {
	*x = GitPipelineInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitPipelineInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitPipelineInfoResponse) ProtoMessage() {}

func (x *GitPipelineInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitPipelineInfoResponse.ProtoReflect.Descriptor instead.
func (*GitPipelineInfoResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{13}
}

func (x *GitPipelineInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GitPipelineInfoResponse) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type GitConfigFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId string `protobuf:"bytes,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitConfigFileRequest) Reset() {
	*x = GitConfigFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigFileRequest) ProtoMessage() {}

func (x *GitConfigFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigFileRequest.ProtoReflect.Descriptor instead.
func (*GitConfigFileRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{14}
}

func (x *GitConfigFileRequest) GetGitProjectId() string {
	if x != nil {
		return x.GitProjectId
	}
	return ""
}

func (x *GitConfigFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitConfigFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     string          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type     string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Elements []*mars.Element `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *GitConfigFileResponse) Reset() {
	*x = GitConfigFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigFileResponse) ProtoMessage() {}

func (x *GitConfigFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigFileResponse.ProtoReflect.Descriptor instead.
func (*GitConfigFileResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{15}
}

func (x *GitConfigFileResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GitConfigFileResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GitConfigFileResponse) GetElements() []*mars.Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

type GitEnableProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitEnableProjectResponse) Reset() {
	*x = GitEnableProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitEnableProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitEnableProjectResponse) ProtoMessage() {}

func (x *GitEnableProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitEnableProjectResponse.ProtoReflect.Descriptor instead.
func (*GitEnableProjectResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{16}
}

type GitDisableProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitDisableProjectResponse) Reset() {
	*x = GitDisableProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDisableProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDisableProjectResponse) ProtoMessage() {}

func (x *GitDisableProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDisableProjectResponse.ProtoReflect.Descriptor instead.
func (*GitDisableProjectResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{17}
}

type GitAllProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitAllProjectsRequest) Reset() {
	*x = GitAllProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitAllProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitAllProjectsRequest) ProtoMessage() {}

func (x *GitAllProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitAllProjectsRequest.ProtoReflect.Descriptor instead.
func (*GitAllProjectsRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{18}
}

type GitProjectOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitProjectOptionsRequest) Reset() {
	*x = GitProjectOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProjectOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProjectOptionsRequest) ProtoMessage() {}

func (x *GitProjectOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProjectOptionsRequest.ProtoReflect.Descriptor instead.
func (*GitProjectOptionsRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{19}
}

type GitConfigShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId int64  `protobuf:"varint,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitConfigShowRequest) Reset() {
	*x = GitConfigShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigShowRequest) ProtoMessage() {}

func (x *GitConfigShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigShowRequest.ProtoReflect.Descriptor instead.
func (*GitConfigShowRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{20}
}

func (x *GitConfigShowRequest) GetGitProjectId() int64 {
	if x != nil {
		return x.GitProjectId
	}
	return 0
}

func (x *GitConfigShowRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitConfigShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch string           `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Config *mars.MarsConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GitConfigShowResponse) Reset() {
	*x = GitConfigShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigShowResponse) ProtoMessage() {}

func (x *GitConfigShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigShowResponse.ProtoReflect.Descriptor instead.
func (*GitConfigShowResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{21}
}

func (x *GitConfigShowResponse) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitConfigShowResponse) GetConfig() *mars.MarsConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GitConfigGlobalConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId int64 `protobuf:"varint,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
}

func (x *GitConfigGlobalConfigRequest) Reset() {
	*x = GitConfigGlobalConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigGlobalConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigGlobalConfigRequest) ProtoMessage() {}

func (x *GitConfigGlobalConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigGlobalConfigRequest.ProtoReflect.Descriptor instead.
func (*GitConfigGlobalConfigRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{22}
}

func (x *GitConfigGlobalConfigRequest) GetGitProjectId() int64 {
	if x != nil {
		return x.GitProjectId
	}
	return 0
}

type GitConfigGlobalConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool             `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Config  *mars.MarsConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GitConfigGlobalConfigResponse) Reset() {
	*x = GitConfigGlobalConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigGlobalConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigGlobalConfigResponse) ProtoMessage() {}

func (x *GitConfigGlobalConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigGlobalConfigResponse.ProtoReflect.Descriptor instead.
func (*GitConfigGlobalConfigResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{23}
}

func (x *GitConfigGlobalConfigResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GitConfigGlobalConfigResponse) GetConfig() *mars.MarsConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GitConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId int64            `protobuf:"varint,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Config       *mars.MarsConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GitConfigUpdateRequest) Reset() {
	*x = GitConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigUpdateRequest) ProtoMessage() {}

func (x *GitConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*GitConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{24}
}

func (x *GitConfigUpdateRequest) GetGitProjectId() int64 {
	if x != nil {
		return x.GitProjectId
	}
	return 0
}

func (x *GitConfigUpdateRequest) GetConfig() *mars.MarsConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GitConfigUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *mars.MarsConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GitConfigUpdateResponse) Reset() {
	*x = GitConfigUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigUpdateResponse) ProtoMessage() {}

func (x *GitConfigUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigUpdateResponse.ProtoReflect.Descriptor instead.
func (*GitConfigUpdateResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{25}
}

func (x *GitConfigUpdateResponse) GetConfig() *mars.MarsConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GitConfigToggleGlobalStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId int64 `protobuf:"varint,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Enabled      bool  `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GitConfigToggleGlobalStatusRequest) Reset() {
	*x = GitConfigToggleGlobalStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigToggleGlobalStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigToggleGlobalStatusRequest) ProtoMessage() {}

func (x *GitConfigToggleGlobalStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigToggleGlobalStatusRequest.ProtoReflect.Descriptor instead.
func (*GitConfigToggleGlobalStatusRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{26}
}

func (x *GitConfigToggleGlobalStatusRequest) GetGitProjectId() int64 {
	if x != nil {
		return x.GitProjectId
	}
	return 0
}

func (x *GitConfigToggleGlobalStatusRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GitConfigDefaultChartValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitProjectId int64  `protobuf:"varint,1,opt,name=git_project_id,json=gitProjectId,proto3" json:"git_project_id,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitConfigDefaultChartValuesRequest) Reset() {
	*x = GitConfigDefaultChartValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigDefaultChartValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigDefaultChartValuesRequest) ProtoMessage() {}

func (x *GitConfigDefaultChartValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigDefaultChartValuesRequest.ProtoReflect.Descriptor instead.
func (*GitConfigDefaultChartValuesRequest) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{27}
}

func (x *GitConfigDefaultChartValuesRequest) GetGitProjectId() int64 {
	if x != nil {
		return x.GitProjectId
	}
	return 0
}

func (x *GitConfigDefaultChartValuesRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitConfigDefaultChartValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GitConfigDefaultChartValuesResponse) Reset() {
	*x = GitConfigDefaultChartValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigDefaultChartValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigDefaultChartValuesResponse) ProtoMessage() {}

func (x *GitConfigDefaultChartValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigDefaultChartValuesResponse.ProtoReflect.Descriptor instead.
func (*GitConfigDefaultChartValuesResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{28}
}

func (x *GitConfigDefaultChartValuesResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GitConfigToggleGlobalStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitConfigToggleGlobalStatusResponse) Reset() {
	*x = GitConfigToggleGlobalStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_git_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfigToggleGlobalStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfigToggleGlobalStatusResponse) ProtoMessage() {}

func (x *GitConfigToggleGlobalStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_git_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfigToggleGlobalStatusResponse.ProtoReflect.Descriptor instead.
func (*GitConfigToggleGlobalStatusResponse) Descriptor() ([]byte, []int) {
	return file_git_git_proto_rawDescGZIP(), []int{29}
}

var File_git_git_proto protoreflect.FileDescriptor

var file_git_git_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x69, 0x74, 0x2f, 0x67, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d, 0x61, 0x72, 0x73, 0x2f, 0x6d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0c,
	0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a,
	0x0e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x3f, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x3d, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x5a, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01,
	0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x22, 0x3c, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x69,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x57,
	0x0a, 0x17, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x3c, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x11,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52,
	0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22,
	0x4a, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x22, 0x66, 0x0a, 0x14, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x69,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18,
	0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x14, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4d, 0x0a,
	0x1c, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0c,
	0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1d,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6c, 0x0a, 0x16,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6d, 0x0a, 0x22, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x22, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x0c, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x3b, 0x0a, 0x23, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdf, 0x08, 0x0a, 0x03, 0x47,
	0x69, 0x74, 0x12, 0x69, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x47, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x47, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x19, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x69, 0x74,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x51, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x47, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x47, 0x69,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x69, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7f, 0x0a, 0x0d, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x47, 0x69,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x7e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x11, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x7d, 0x12,
	0x9e, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x69, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x12, 0x53, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x7d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x89, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0xbb, 0x05, 0x0a,
	0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x04, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x15, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x30, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x76, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x75, 0x63, 0x2d, 0x63, 0x6e, 0x7a,
	0x6a, 0x2f, 0x6d, 0x61, 0x72, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x34,
	0x2f, 0x67, 0x69, 0x74, 0x3b, 0x67, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_git_git_proto_rawDescOnce sync.Once
	file_git_git_proto_rawDescData = file_git_git_proto_rawDesc
)

func file_git_git_proto_rawDescGZIP() []byte {
	file_git_git_proto_rawDescOnce.Do(func() {
		file_git_git_proto_rawDescData = protoimpl.X.CompressGZIP(file_git_git_proto_rawDescData)
	})
	return file_git_git_proto_rawDescData
}

var file_git_git_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_git_git_proto_goTypes = []interface{}{
	(*GitEnableProjectRequest)(nil),             // 0: GitEnableProjectRequest
	(*GitDisableProjectRequest)(nil),            // 1: GitDisableProjectRequest
	(*GitProjectItem)(nil),                      // 2: GitProjectItem
	(*GitAllProjectsResponse)(nil),              // 3: GitAllProjectsResponse
	(*GitOption)(nil),                           // 4: GitOption
	(*GitProjectOptionsResponse)(nil),           // 5: GitProjectOptionsResponse
	(*GitBranchOptionsRequest)(nil),             // 6: GitBranchOptionsRequest
	(*GitBranchOptionsResponse)(nil),            // 7: GitBranchOptionsResponse
	(*GitCommitOptionsRequest)(nil),             // 8: GitCommitOptionsRequest
	(*GitCommitOptionsResponse)(nil),            // 9: GitCommitOptionsResponse
	(*GitCommitRequest)(nil),                    // 10: GitCommitRequest
	(*GitCommitResponse)(nil),                   // 11: GitCommitResponse
	(*GitPipelineInfoRequest)(nil),              // 12: GitPipelineInfoRequest
	(*GitPipelineInfoResponse)(nil),             // 13: GitPipelineInfoResponse
	(*GitConfigFileRequest)(nil),                // 14: GitConfigFileRequest
	(*GitConfigFileResponse)(nil),               // 15: GitConfigFileResponse
	(*GitEnableProjectResponse)(nil),            // 16: GitEnableProjectResponse
	(*GitDisableProjectResponse)(nil),           // 17: GitDisableProjectResponse
	(*GitAllProjectsRequest)(nil),               // 18: GitAllProjectsRequest
	(*GitProjectOptionsRequest)(nil),            // 19: GitProjectOptionsRequest
	(*GitConfigShowRequest)(nil),                // 20: GitConfigShowRequest
	(*GitConfigShowResponse)(nil),               // 21: GitConfigShowResponse
	(*GitConfigGlobalConfigRequest)(nil),        // 22: GitConfigGlobalConfigRequest
	(*GitConfigGlobalConfigResponse)(nil),       // 23: GitConfigGlobalConfigResponse
	(*GitConfigUpdateRequest)(nil),              // 24: GitConfigUpdateRequest
	(*GitConfigUpdateResponse)(nil),             // 25: GitConfigUpdateResponse
	(*GitConfigToggleGlobalStatusRequest)(nil),  // 26: GitConfigToggleGlobalStatusRequest
	(*GitConfigDefaultChartValuesRequest)(nil),  // 27: GitConfigDefaultChartValuesRequest
	(*GitConfigDefaultChartValuesResponse)(nil), // 28: GitConfigDefaultChartValuesResponse
	(*GitConfigToggleGlobalStatusResponse)(nil), // 29: GitConfigToggleGlobalStatusResponse
	(*mars.Element)(nil),                        // 30: Element
	(*mars.MarsConfig)(nil),                     // 31: MarsConfig
}
var file_git_git_proto_depIdxs = []int32{
	2,  // 0: GitAllProjectsResponse.items:type_name -> GitProjectItem
	4,  // 1: GitProjectOptionsResponse.items:type_name -> GitOption
	4,  // 2: GitBranchOptionsResponse.items:type_name -> GitOption
	4,  // 3: GitCommitOptionsResponse.items:type_name -> GitOption
	30, // 4: GitConfigFileResponse.elements:type_name -> Element
	31, // 5: GitConfigShowResponse.config:type_name -> MarsConfig
	31, // 6: GitConfigGlobalConfigResponse.config:type_name -> MarsConfig
	31, // 7: GitConfigUpdateRequest.config:type_name -> MarsConfig
	31, // 8: GitConfigUpdateResponse.config:type_name -> MarsConfig
	0,  // 9: Git.EnableProject:input_type -> GitEnableProjectRequest
	1,  // 10: Git.DisableProject:input_type -> GitDisableProjectRequest
	18, // 11: Git.All:input_type -> GitAllProjectsRequest
	19, // 12: Git.ProjectOptions:input_type -> GitProjectOptionsRequest
	6,  // 13: Git.BranchOptions:input_type -> GitBranchOptionsRequest
	8,  // 14: Git.CommitOptions:input_type -> GitCommitOptionsRequest
	10, // 15: Git.Commit:input_type -> GitCommitRequest
	12, // 16: Git.PipelineInfo:input_type -> GitPipelineInfoRequest
	14, // 17: Git.MarsConfigFile:input_type -> GitConfigFileRequest
	20, // 18: GitConfig.Show:input_type -> GitConfigShowRequest
	22, // 19: GitConfig.GlobalConfig:input_type -> GitConfigGlobalConfigRequest
	26, // 20: GitConfig.ToggleGlobalStatus:input_type -> GitConfigToggleGlobalStatusRequest
	24, // 21: GitConfig.Update:input_type -> GitConfigUpdateRequest
	27, // 22: GitConfig.GetDefaultChartValues:input_type -> GitConfigDefaultChartValuesRequest
	16, // 23: Git.EnableProject:output_type -> GitEnableProjectResponse
	17, // 24: Git.DisableProject:output_type -> GitDisableProjectResponse
	3,  // 25: Git.All:output_type -> GitAllProjectsResponse
	5,  // 26: Git.ProjectOptions:output_type -> GitProjectOptionsResponse
	7,  // 27: Git.BranchOptions:output_type -> GitBranchOptionsResponse
	9,  // 28: Git.CommitOptions:output_type -> GitCommitOptionsResponse
	11, // 29: Git.Commit:output_type -> GitCommitResponse
	13, // 30: Git.PipelineInfo:output_type -> GitPipelineInfoResponse
	15, // 31: Git.MarsConfigFile:output_type -> GitConfigFileResponse
	21, // 32: GitConfig.Show:output_type -> GitConfigShowResponse
	23, // 33: GitConfig.GlobalConfig:output_type -> GitConfigGlobalConfigResponse
	29, // 34: GitConfig.ToggleGlobalStatus:output_type -> GitConfigToggleGlobalStatusResponse
	25, // 35: GitConfig.Update:output_type -> GitConfigUpdateResponse
	28, // 36: GitConfig.GetDefaultChartValues:output_type -> GitConfigDefaultChartValuesResponse
	23, // [23:37] is the sub-list for method output_type
	9,  // [9:23] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_git_git_proto_init() }
func file_git_git_proto_init() {
	if File_git_git_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_git_git_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitEnableProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDisableProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProjectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitAllProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProjectOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitBranchOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitBranchOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitPipelineInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitPipelineInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitEnableProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDisableProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitAllProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProjectOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigGlobalConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigGlobalConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigToggleGlobalStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigDefaultChartValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigDefaultChartValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_git_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfigToggleGlobalStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_git_git_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_git_git_proto_goTypes,
		DependencyIndexes: file_git_git_proto_depIdxs,
		MessageInfos:      file_git_git_proto_msgTypes,
	}.Build()
	File_git_git_proto = out.File
	file_git_git_proto_rawDesc = nil
	file_git_git_proto_goTypes = nil
	file_git_git_proto_depIdxs = nil
}
