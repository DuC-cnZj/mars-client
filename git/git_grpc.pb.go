// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: git/git.proto

package git

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitClient is the client API for Git service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitClient interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(ctx context.Context, in *EnableProjectRequest, opts ...grpc.CallOption) (*EnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(ctx context.Context, in *DisableProjectRequest, opts ...grpc.CallOption) (*DisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(ctx context.Context, in *ProjectOptionsRequest, opts ...grpc.CallOption) (*ProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(ctx context.Context, in *BranchOptionsRequest, opts ...grpc.CallOption) (*BranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(ctx context.Context, in *CommitOptionsRequest, opts ...grpc.CallOption) (*CommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(ctx context.Context, in *PipelineInfoRequest, opts ...grpc.CallOption) (*PipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(ctx context.Context, in *MarsConfigFileRequest, opts ...grpc.CallOption) (*MarsConfigFileResponse, error)
}

type gitClient struct {
	cc grpc.ClientConnInterface
}

func NewGitClient(cc grpc.ClientConnInterface) GitClient {
	return &gitClient{cc}
}

func (c *gitClient) EnableProject(ctx context.Context, in *EnableProjectRequest, opts ...grpc.CallOption) (*EnableProjectResponse, error) {
	out := new(EnableProjectResponse)
	err := c.cc.Invoke(ctx, "/git.Git/EnableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) DisableProject(ctx context.Context, in *DisableProjectRequest, opts ...grpc.CallOption) (*DisableProjectResponse, error) {
	out := new(DisableProjectResponse)
	err := c.cc.Invoke(ctx, "/git.Git/DisableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) All(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllResponse, error) {
	out := new(AllResponse)
	err := c.cc.Invoke(ctx, "/git.Git/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) ProjectOptions(ctx context.Context, in *ProjectOptionsRequest, opts ...grpc.CallOption) (*ProjectOptionsResponse, error) {
	out := new(ProjectOptionsResponse)
	err := c.cc.Invoke(ctx, "/git.Git/ProjectOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) BranchOptions(ctx context.Context, in *BranchOptionsRequest, opts ...grpc.CallOption) (*BranchOptionsResponse, error) {
	out := new(BranchOptionsResponse)
	err := c.cc.Invoke(ctx, "/git.Git/BranchOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) CommitOptions(ctx context.Context, in *CommitOptionsRequest, opts ...grpc.CallOption) (*CommitOptionsResponse, error) {
	out := new(CommitOptionsResponse)
	err := c.cc.Invoke(ctx, "/git.Git/CommitOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/git.Git/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) PipelineInfo(ctx context.Context, in *PipelineInfoRequest, opts ...grpc.CallOption) (*PipelineInfoResponse, error) {
	out := new(PipelineInfoResponse)
	err := c.cc.Invoke(ctx, "/git.Git/PipelineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) MarsConfigFile(ctx context.Context, in *MarsConfigFileRequest, opts ...grpc.CallOption) (*MarsConfigFileResponse, error) {
	out := new(MarsConfigFileResponse)
	err := c.cc.Invoke(ctx, "/git.Git/MarsConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServer is the server API for Git service.
// All implementations must embed UnimplementedGitServer
// for forward compatibility
type GitServer interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(context.Context, *EnableProjectRequest) (*EnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(context.Context, *DisableProjectRequest) (*DisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(context.Context, *AllRequest) (*AllResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(context.Context, *ProjectOptionsRequest) (*ProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(context.Context, *BranchOptionsRequest) (*BranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(context.Context, *CommitOptionsRequest) (*CommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(context.Context, *PipelineInfoRequest) (*PipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(context.Context, *MarsConfigFileRequest) (*MarsConfigFileResponse, error)
	mustEmbedUnimplementedGitServer()
}

// UnimplementedGitServer must be embedded to have forward compatible implementations.
type UnimplementedGitServer struct {
}

func (UnimplementedGitServer) EnableProject(context.Context, *EnableProjectRequest) (*EnableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedGitServer) DisableProject(context.Context, *DisableProjectRequest) (*DisableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProject not implemented")
}
func (UnimplementedGitServer) All(context.Context, *AllRequest) (*AllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedGitServer) ProjectOptions(context.Context, *ProjectOptionsRequest) (*ProjectOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectOptions not implemented")
}
func (UnimplementedGitServer) BranchOptions(context.Context, *BranchOptionsRequest) (*BranchOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchOptions not implemented")
}
func (UnimplementedGitServer) CommitOptions(context.Context, *CommitOptionsRequest) (*CommitOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOptions not implemented")
}
func (UnimplementedGitServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedGitServer) PipelineInfo(context.Context, *PipelineInfoRequest) (*PipelineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineInfo not implemented")
}
func (UnimplementedGitServer) MarsConfigFile(context.Context, *MarsConfigFileRequest) (*MarsConfigFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarsConfigFile not implemented")
}
func (UnimplementedGitServer) mustEmbedUnimplementedGitServer() {}

// UnsafeGitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServer will
// result in compilation errors.
type UnsafeGitServer interface {
	mustEmbedUnimplementedGitServer()
}

func RegisterGitServer(s grpc.ServiceRegistrar, srv GitServer) {
	s.RegisterService(&Git_ServiceDesc, srv)
}

func _Git_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/EnableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).EnableProject(ctx, req.(*EnableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_DisableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).DisableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/DisableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).DisableProject(ctx, req.(*DisableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).All(ctx, req.(*AllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_ProjectOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).ProjectOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/ProjectOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).ProjectOptions(ctx, req.(*ProjectOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_BranchOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).BranchOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/BranchOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).BranchOptions(ctx, req.(*BranchOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_CommitOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).CommitOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/CommitOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).CommitOptions(ctx, req.(*CommitOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_PipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).PipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/PipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).PipelineInfo(ctx, req.(*PipelineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_MarsConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarsConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).MarsConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/MarsConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).MarsConfigFile(ctx, req.(*MarsConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Git_ServiceDesc is the grpc.ServiceDesc for Git service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Git_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "git.Git",
	HandlerType: (*GitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableProject",
			Handler:    _Git_EnableProject_Handler,
		},
		{
			MethodName: "DisableProject",
			Handler:    _Git_DisableProject_Handler,
		},
		{
			MethodName: "All",
			Handler:    _Git_All_Handler,
		},
		{
			MethodName: "ProjectOptions",
			Handler:    _Git_ProjectOptions_Handler,
		},
		{
			MethodName: "BranchOptions",
			Handler:    _Git_BranchOptions_Handler,
		},
		{
			MethodName: "CommitOptions",
			Handler:    _Git_CommitOptions_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Git_Commit_Handler,
		},
		{
			MethodName: "PipelineInfo",
			Handler:    _Git_PipelineInfo_Handler,
		},
		{
			MethodName: "MarsConfigFile",
			Handler:    _Git_MarsConfigFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git/git.proto",
}
