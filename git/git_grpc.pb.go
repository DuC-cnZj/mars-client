// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: git/git.proto

package git

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitClient is the client API for Git service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitClient interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(ctx context.Context, in *GitEnableProjectRequest, opts ...grpc.CallOption) (*GitEnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(ctx context.Context, in *GitDisableProjectRequest, opts ...grpc.CallOption) (*GitDisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(ctx context.Context, in *GitAllProjectsRequest, opts ...grpc.CallOption) (*GitAllProjectsResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(ctx context.Context, in *GitProjectOptionsRequest, opts ...grpc.CallOption) (*GitProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(ctx context.Context, in *GitBranchOptionsRequest, opts ...grpc.CallOption) (*GitBranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(ctx context.Context, in *GitCommitOptionsRequest, opts ...grpc.CallOption) (*GitCommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(ctx context.Context, in *GitCommitRequest, opts ...grpc.CallOption) (*GitCommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(ctx context.Context, in *GitPipelineInfoRequest, opts ...grpc.CallOption) (*GitPipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(ctx context.Context, in *GitConfigFileRequest, opts ...grpc.CallOption) (*GitConfigFileResponse, error)
}

type gitClient struct {
	cc grpc.ClientConnInterface
}

func NewGitClient(cc grpc.ClientConnInterface) GitClient {
	return &gitClient{cc}
}

func (c *gitClient) EnableProject(ctx context.Context, in *GitEnableProjectRequest, opts ...grpc.CallOption) (*GitEnableProjectResponse, error) {
	out := new(GitEnableProjectResponse)
	err := c.cc.Invoke(ctx, "/Git/EnableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) DisableProject(ctx context.Context, in *GitDisableProjectRequest, opts ...grpc.CallOption) (*GitDisableProjectResponse, error) {
	out := new(GitDisableProjectResponse)
	err := c.cc.Invoke(ctx, "/Git/DisableProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) All(ctx context.Context, in *GitAllProjectsRequest, opts ...grpc.CallOption) (*GitAllProjectsResponse, error) {
	out := new(GitAllProjectsResponse)
	err := c.cc.Invoke(ctx, "/Git/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) ProjectOptions(ctx context.Context, in *GitProjectOptionsRequest, opts ...grpc.CallOption) (*GitProjectOptionsResponse, error) {
	out := new(GitProjectOptionsResponse)
	err := c.cc.Invoke(ctx, "/Git/ProjectOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) BranchOptions(ctx context.Context, in *GitBranchOptionsRequest, opts ...grpc.CallOption) (*GitBranchOptionsResponse, error) {
	out := new(GitBranchOptionsResponse)
	err := c.cc.Invoke(ctx, "/Git/BranchOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) CommitOptions(ctx context.Context, in *GitCommitOptionsRequest, opts ...grpc.CallOption) (*GitCommitOptionsResponse, error) {
	out := new(GitCommitOptionsResponse)
	err := c.cc.Invoke(ctx, "/Git/CommitOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) Commit(ctx context.Context, in *GitCommitRequest, opts ...grpc.CallOption) (*GitCommitResponse, error) {
	out := new(GitCommitResponse)
	err := c.cc.Invoke(ctx, "/Git/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) PipelineInfo(ctx context.Context, in *GitPipelineInfoRequest, opts ...grpc.CallOption) (*GitPipelineInfoResponse, error) {
	out := new(GitPipelineInfoResponse)
	err := c.cc.Invoke(ctx, "/Git/PipelineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) MarsConfigFile(ctx context.Context, in *GitConfigFileRequest, opts ...grpc.CallOption) (*GitConfigFileResponse, error) {
	out := new(GitConfigFileResponse)
	err := c.cc.Invoke(ctx, "/Git/MarsConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServer is the server API for Git service.
// All implementations must embed UnimplementedGitServer
// for forward compatibility
type GitServer interface {
	// EnableProject 开启项目，开启后可以在项目列表看到
	EnableProject(context.Context, *GitEnableProjectRequest) (*GitEnableProjectResponse, error)
	// DisableProject 关闭项目
	DisableProject(context.Context, *GitDisableProjectRequest) (*GitDisableProjectResponse, error)
	// All 获取所有的 git 项目
	All(context.Context, *GitAllProjectsRequest) (*GitAllProjectsResponse, error)
	// ProjectOptions 获取项目信息， 用在级联列表
	ProjectOptions(context.Context, *GitProjectOptionsRequest) (*GitProjectOptionsResponse, error)
	// BranchOptions 获取分支信息， 用在级联列表
	BranchOptions(context.Context, *GitBranchOptionsRequest) (*GitBranchOptionsResponse, error)
	// CommitOptions 获取commit信息， 用在级联列表
	CommitOptions(context.Context, *GitCommitOptionsRequest) (*GitCommitOptionsResponse, error)
	// Commit 获取 commit 详情
	Commit(context.Context, *GitCommitRequest) (*GitCommitResponse, error)
	// PipelineInfo 获取 pipeline 详情
	PipelineInfo(context.Context, *GitPipelineInfoRequest) (*GitPipelineInfoResponse, error)
	// MarsConfigFile 获取项目 mars 配置详情
	MarsConfigFile(context.Context, *GitConfigFileRequest) (*GitConfigFileResponse, error)
	mustEmbedUnimplementedGitServer()
}

// UnimplementedGitServer must be embedded to have forward compatible implementations.
type UnimplementedGitServer struct {
}

func (UnimplementedGitServer) EnableProject(context.Context, *GitEnableProjectRequest) (*GitEnableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedGitServer) DisableProject(context.Context, *GitDisableProjectRequest) (*GitDisableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProject not implemented")
}
func (UnimplementedGitServer) All(context.Context, *GitAllProjectsRequest) (*GitAllProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedGitServer) ProjectOptions(context.Context, *GitProjectOptionsRequest) (*GitProjectOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectOptions not implemented")
}
func (UnimplementedGitServer) BranchOptions(context.Context, *GitBranchOptionsRequest) (*GitBranchOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchOptions not implemented")
}
func (UnimplementedGitServer) CommitOptions(context.Context, *GitCommitOptionsRequest) (*GitCommitOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOptions not implemented")
}
func (UnimplementedGitServer) Commit(context.Context, *GitCommitRequest) (*GitCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedGitServer) PipelineInfo(context.Context, *GitPipelineInfoRequest) (*GitPipelineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineInfo not implemented")
}
func (UnimplementedGitServer) MarsConfigFile(context.Context, *GitConfigFileRequest) (*GitConfigFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarsConfigFile not implemented")
}
func (UnimplementedGitServer) mustEmbedUnimplementedGitServer() {}

// UnsafeGitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServer will
// result in compilation errors.
type UnsafeGitServer interface {
	mustEmbedUnimplementedGitServer()
}

func RegisterGitServer(s grpc.ServiceRegistrar, srv GitServer) {
	s.RegisterService(&Git_ServiceDesc, srv)
}

func _Git_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitEnableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/EnableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).EnableProject(ctx, req.(*GitEnableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_DisableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitDisableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).DisableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/DisableProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).DisableProject(ctx, req.(*GitDisableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitAllProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).All(ctx, req.(*GitAllProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_ProjectOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProjectOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).ProjectOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/ProjectOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).ProjectOptions(ctx, req.(*GitProjectOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_BranchOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitBranchOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).BranchOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/BranchOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).BranchOptions(ctx, req.(*GitBranchOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_CommitOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCommitOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).CommitOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/CommitOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).CommitOptions(ctx, req.(*GitCommitOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).Commit(ctx, req.(*GitCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_PipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitPipelineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).PipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/PipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).PipelineInfo(ctx, req.(*GitPipelineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_MarsConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).MarsConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Git/MarsConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).MarsConfigFile(ctx, req.(*GitConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Git_ServiceDesc is the grpc.ServiceDesc for Git service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Git_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Git",
	HandlerType: (*GitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableProject",
			Handler:    _Git_EnableProject_Handler,
		},
		{
			MethodName: "DisableProject",
			Handler:    _Git_DisableProject_Handler,
		},
		{
			MethodName: "All",
			Handler:    _Git_All_Handler,
		},
		{
			MethodName: "ProjectOptions",
			Handler:    _Git_ProjectOptions_Handler,
		},
		{
			MethodName: "BranchOptions",
			Handler:    _Git_BranchOptions_Handler,
		},
		{
			MethodName: "CommitOptions",
			Handler:    _Git_CommitOptions_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Git_Commit_Handler,
		},
		{
			MethodName: "PipelineInfo",
			Handler:    _Git_PipelineInfo_Handler,
		},
		{
			MethodName: "MarsConfigFile",
			Handler:    _Git_MarsConfigFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git/git.proto",
}

// GitConfigClient is the client API for GitConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitConfigClient interface {
	// Show 查看项目配置
	Show(ctx context.Context, in *GitConfigShowRequest, opts ...grpc.CallOption) (*GitConfigShowResponse, error)
	// GlobalConfig 查看项目 GlobalConfig 配置
	GlobalConfig(ctx context.Context, in *GitConfigGlobalConfigRequest, opts ...grpc.CallOption) (*GitConfigGlobalConfigResponse, error)
	// ToggleGlobalStatus 开启/关闭全局配置
	ToggleGlobalStatus(ctx context.Context, in *GitConfigToggleGlobalStatusRequest, opts ...grpc.CallOption) (*GitConfigToggleGlobalStatusResponse, error)
	// Update 更新全局配置
	Update(ctx context.Context, in *GitConfigUpdateRequest, opts ...grpc.CallOption) (*GitConfigUpdateResponse, error)
	// GetDefaultChartValues 获取项目 helm charts 的默认 values.yaml
	GetDefaultChartValues(ctx context.Context, in *GitConfigDefaultChartValuesRequest, opts ...grpc.CallOption) (*GitConfigDefaultChartValuesResponse, error)
}

type gitConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewGitConfigClient(cc grpc.ClientConnInterface) GitConfigClient {
	return &gitConfigClient{cc}
}

func (c *gitConfigClient) Show(ctx context.Context, in *GitConfigShowRequest, opts ...grpc.CallOption) (*GitConfigShowResponse, error) {
	out := new(GitConfigShowResponse)
	err := c.cc.Invoke(ctx, "/GitConfig/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitConfigClient) GlobalConfig(ctx context.Context, in *GitConfigGlobalConfigRequest, opts ...grpc.CallOption) (*GitConfigGlobalConfigResponse, error) {
	out := new(GitConfigGlobalConfigResponse)
	err := c.cc.Invoke(ctx, "/GitConfig/GlobalConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitConfigClient) ToggleGlobalStatus(ctx context.Context, in *GitConfigToggleGlobalStatusRequest, opts ...grpc.CallOption) (*GitConfigToggleGlobalStatusResponse, error) {
	out := new(GitConfigToggleGlobalStatusResponse)
	err := c.cc.Invoke(ctx, "/GitConfig/ToggleGlobalStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitConfigClient) Update(ctx context.Context, in *GitConfigUpdateRequest, opts ...grpc.CallOption) (*GitConfigUpdateResponse, error) {
	out := new(GitConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/GitConfig/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitConfigClient) GetDefaultChartValues(ctx context.Context, in *GitConfigDefaultChartValuesRequest, opts ...grpc.CallOption) (*GitConfigDefaultChartValuesResponse, error) {
	out := new(GitConfigDefaultChartValuesResponse)
	err := c.cc.Invoke(ctx, "/GitConfig/GetDefaultChartValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitConfigServer is the server API for GitConfig service.
// All implementations must embed UnimplementedGitConfigServer
// for forward compatibility
type GitConfigServer interface {
	// Show 查看项目配置
	Show(context.Context, *GitConfigShowRequest) (*GitConfigShowResponse, error)
	// GlobalConfig 查看项目 GlobalConfig 配置
	GlobalConfig(context.Context, *GitConfigGlobalConfigRequest) (*GitConfigGlobalConfigResponse, error)
	// ToggleGlobalStatus 开启/关闭全局配置
	ToggleGlobalStatus(context.Context, *GitConfigToggleGlobalStatusRequest) (*GitConfigToggleGlobalStatusResponse, error)
	// Update 更新全局配置
	Update(context.Context, *GitConfigUpdateRequest) (*GitConfigUpdateResponse, error)
	// GetDefaultChartValues 获取项目 helm charts 的默认 values.yaml
	GetDefaultChartValues(context.Context, *GitConfigDefaultChartValuesRequest) (*GitConfigDefaultChartValuesResponse, error)
	mustEmbedUnimplementedGitConfigServer()
}

// UnimplementedGitConfigServer must be embedded to have forward compatible implementations.
type UnimplementedGitConfigServer struct {
}

func (UnimplementedGitConfigServer) Show(context.Context, *GitConfigShowRequest) (*GitConfigShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedGitConfigServer) GlobalConfig(context.Context, *GitConfigGlobalConfigRequest) (*GitConfigGlobalConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalConfig not implemented")
}
func (UnimplementedGitConfigServer) ToggleGlobalStatus(context.Context, *GitConfigToggleGlobalStatusRequest) (*GitConfigToggleGlobalStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleGlobalStatus not implemented")
}
func (UnimplementedGitConfigServer) Update(context.Context, *GitConfigUpdateRequest) (*GitConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGitConfigServer) GetDefaultChartValues(context.Context, *GitConfigDefaultChartValuesRequest) (*GitConfigDefaultChartValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultChartValues not implemented")
}
func (UnimplementedGitConfigServer) mustEmbedUnimplementedGitConfigServer() {}

// UnsafeGitConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitConfigServer will
// result in compilation errors.
type UnsafeGitConfigServer interface {
	mustEmbedUnimplementedGitConfigServer()
}

func RegisterGitConfigServer(s grpc.ServiceRegistrar, srv GitConfigServer) {
	s.RegisterService(&GitConfig_ServiceDesc, srv)
}

func _GitConfig_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitConfigServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitConfig/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitConfigServer).Show(ctx, req.(*GitConfigShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitConfig_GlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigGlobalConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitConfigServer).GlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitConfig/GlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitConfigServer).GlobalConfig(ctx, req.(*GitConfigGlobalConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitConfig_ToggleGlobalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigToggleGlobalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitConfigServer).ToggleGlobalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitConfig/ToggleGlobalStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitConfigServer).ToggleGlobalStatus(ctx, req.(*GitConfigToggleGlobalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitConfig_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitConfigServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitConfig/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitConfigServer).Update(ctx, req.(*GitConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitConfig_GetDefaultChartValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigDefaultChartValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitConfigServer).GetDefaultChartValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitConfig/GetDefaultChartValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitConfigServer).GetDefaultChartValues(ctx, req.(*GitConfigDefaultChartValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitConfig_ServiceDesc is the grpc.ServiceDesc for GitConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GitConfig",
	HandlerType: (*GitConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _GitConfig_Show_Handler,
		},
		{
			MethodName: "GlobalConfig",
			Handler:    _GitConfig_GlobalConfig_Handler,
		},
		{
			MethodName: "ToggleGlobalStatus",
			Handler:    _GitConfig_ToggleGlobalStatus_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GitConfig_Update_Handler,
		},
		{
			MethodName: "GetDefaultChartValues",
			Handler:    _GitConfig_GetDefaultChartValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git/git.proto",
}
