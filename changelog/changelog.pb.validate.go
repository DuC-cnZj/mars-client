// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: changelog/changelog.proto

package changelog

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChangelogShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangelogShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangelogShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangelogShowRequestMultiError, or nil if none found.
func (m *ChangelogShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangelogShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ChangelogShowRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OnlyChanged

	if len(errors) > 0 {
		return ChangelogShowRequestMultiError(errors)
	}
	return nil
}

// ChangelogShowRequestMultiError is an error wrapping multiple validation
// errors returned by ChangelogShowRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangelogShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangelogShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangelogShowRequestMultiError) AllErrors() []error { return m }

// ChangelogShowRequestValidationError is the validation error returned by
// ChangelogShowRequest.Validate if the designated constraints aren't met.
type ChangelogShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangelogShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangelogShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangelogShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangelogShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangelogShowRequestValidationError) ErrorName() string {
	return "ChangelogShowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangelogShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangelogShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangelogShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangelogShowRequestValidationError{}

// Validate checks the field values on ChangelogShowItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangelogShowItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangelogShowItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangelogShowItemMultiError, or nil if none found.
func (m *ChangelogShowItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangelogShowItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Config

	// no validation rules for Date

	// no validation rules for Username

	if len(errors) > 0 {
		return ChangelogShowItemMultiError(errors)
	}
	return nil
}

// ChangelogShowItemMultiError is an error wrapping multiple validation errors
// returned by ChangelogShowItem.ValidateAll() if the designated constraints
// aren't met.
type ChangelogShowItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangelogShowItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangelogShowItemMultiError) AllErrors() []error { return m }

// ChangelogShowItemValidationError is the validation error returned by
// ChangelogShowItem.Validate if the designated constraints aren't met.
type ChangelogShowItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangelogShowItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangelogShowItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangelogShowItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangelogShowItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangelogShowItemValidationError) ErrorName() string {
	return "ChangelogShowItemValidationError"
}

// Error satisfies the builtin error interface
func (e ChangelogShowItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangelogShowItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangelogShowItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangelogShowItemValidationError{}

// Validate checks the field values on ChangelogShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangelogShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangelogShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangelogShowResponseMultiError, or nil if none found.
func (m *ChangelogShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangelogShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangelogShowResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangelogShowResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangelogShowResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangelogShowResponseMultiError(errors)
	}
	return nil
}

// ChangelogShowResponseMultiError is an error wrapping multiple validation
// errors returned by ChangelogShowResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangelogShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangelogShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangelogShowResponseMultiError) AllErrors() []error { return m }

// ChangelogShowResponseValidationError is the validation error returned by
// ChangelogShowResponse.Validate if the designated constraints aren't met.
type ChangelogShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangelogShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangelogShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangelogShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangelogShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangelogShowResponseValidationError) ErrorName() string {
	return "ChangelogShowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangelogShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangelogShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangelogShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangelogShowResponseValidationError{}
